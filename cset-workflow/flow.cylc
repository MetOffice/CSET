#!jinja2
[meta]
title = CSET
description = Workflow for running CSET.
URL = https://metoffice.github.io/CSET

# Import all of our Jinja utilities for use in the workflow.
{% from "jinja_utils" import get_models, glob, max, min, zip, sanitise_task_name %}
# Load a list a model detail dictionaries.
{% set models = get_models(ROSE_SUITE_VARIABLES) %}


[scheduling]
    # Initial and final cycle points cover the entire period of interest.
    {% if CSET_CYCLING_MODE == "case_study" %}
        initial cycle point = {{ min(CSET_CASE_DATES) }}
        final cycle point = {{ max(CSET_CASE_DATES) }}
    {% elif CSET_CYCLING_MODE == "trial" %}
        initial cycle point = {{CSET_TRIAL_START_DATE}}
        # End date can be blank.
        {% if CSET_TRIAL_END_DATE|default(False) %}
            final cycle point = {{CSET_TRIAL_END_DATE}}
        {% endif %}
    {% endif %}

    [[special tasks]]
        # cycle_complete depends on its previous instance. We then don't need to
        # know the offset between the cycles.
        sequential = cycle_complete

    [[graph]]
    # Only runs on the first cycle.
    R1/^ = """
    build_conda => install_website_skeleton => setup_complete
    """

    {% if CSET_CYCLING_MODE == "case_study" %}
        # Runs for every forecast initiation time to process the data in parallel.
        {% for date in CSET_CASE_DATES %}
            R1/{{date}} = """
            setup_complete[^] =>
            FETCH_DATA:succeed-all =>
            fetch_complete
            fetch_complete =>
            PROCESS:{% if LOGLEVEL == "DEBUG" %}succeed-all{% else %}finish-all{% endif %} =>
            cycle_complete
            """
        {% endfor %}
    {% elif CSET_CYCLING_MODE == "trial" %}
        # Analyse from each forecast.
        {{CSET_TRIAL_CYCLE_PERIOD}} = """
        setup_complete[^] =>
        FETCH_DATA:succeed-all =>
        fetch_complete =>
        PROCESS:{% if LOGLEVEL == "DEBUG" %}succeed-all{% else %}finish-all{% endif %} =>
        cycle_complete
        """
    {% endif %}

    # Can only run tasks on final cycle point if it exists, so skip for
    # continuous trials.
    {% if CSET_CYCLING_MODE != "trial" or CSET_TRIAL_END_DATE|default(False) %}
        # Only runs on the final cycle.
        R1/$ = """
        cycle_complete =>
        PROCESS_CASE_AGGREGATION:{% if LOGLEVEL == "DEBUG" %}succeed-all{% else %}finish-all{% endif %} =>
        finish_website => send_email
        finish_website => housekeeping
        """
    {% endif %}


[runtime]
    [[root]]
    script = rose task-run -v
    execution time limit = PT15M
        [[[environment]]]
        # As these variables are used in the environment script, they must be
        # defined.
        CSET_ENV_USE_MODULES = {{CSET_ENV_USE_MODULES|default(False)}}
        {% if CSET_ENV_USE_MODULES|default(False) %}
            MODULES_LIST = {{MODULES_LIST}}
            MODULES_PURGE = {{MODULES_PURGE}}
        {% endif %}

        CSET_ENV_SEPARATE_MET = {{CSET_ENV_SEPARATE_MET|default(False)}}
        {% if CSET_ENV_SEPARATE_MET|default(False) %}
            CONDA_METPLUS_VENV_LOCATION = {{CONDA_METPLUS_VENV_LOCATION}}
            MET_INSTALL_DIR = {{MET_INSTALL_DIR}}
            MET_BUILD_BASE = {{MET_BUILD_BASE}}
            METPLUS_BASE = {{METPLUS_BASE}}
            MET_LIBRARIES = {{MET_LIBRARIES}}
        {% endif %}

        CONDA_PATH = {{CONDA_PATH}}
        LOGLEVEL = {{LOGLEVEL}}
        COLORBAR_FILE = {{COLORBAR_FILE}}
        PLOT_RESOLUTION = {{PLOT_RESOLUTION|default(100)}}
        SKIP_WRITE = {{SKIP_WRITE}}

    [[PROCESS]]
    script = rose task-run -v --app-key=run_cset_recipe
    execution time limit = PT15M
    [[[directives]]]
        --mem=5000

    [[PROCESS_CASE_AGGREGATION]]
    script = rose task-run -v --app-key=run_cset_recipe
    execution time limit = PT3H
        [[[directives]]]
        --mem=100000
        [[[environment]]]
        # As this process is used for case aggregation we hard code to True.
        DO_CASE_AGGREGATION = True

    [[FETCH_DATA]]
    script = rose task-run -v --app-key=fetch_fcst
    execution time limit = PT1H
        [[[environment]]]
        ANALYSIS_LENGTH = {{ANALYSIS_LENGTH}}

    [[METPLUS]]
        [[[environment]]]
        {% if METPLUS_GRID_STAT|default(False) %}
            METPLUS_ANA_DIR = {{METPLUS_ANA_DIR}}
            METPLUS_FCST_DIR = {{METPLUS_FCST_DIR}}
            METPLUS_OBS_DIR = {{METPLUS_OBS_DIR}}
            ROSE_APP_OPT_CONF_KEYS = {{METPLUS_OPT_CONFIG_KEYS}}
        {% endif %}

    # Noop tasks to ensure a complete/efficient workflow graph.
    [[DUMMY_TASK]]
    script = true
    platform = localhost
    execution time limit = PT1M
    run mode = skip

    [[setup_complete]]
    inherit = DUMMY_TASK

    [[fetch_complete]]
    inherit = DUMMY_TASK

    [[cycle_complete]]
    inherit = DUMMY_TASK

    [[dummy_process]]
    inherit = DUMMY_TASK, PROCESS

    [[dummy_process_case_aggregation]]
    inherit = DUMMY_TASK, PROCESS_CASE_AGGREGATION

    [[build_conda]]
    # Create the conda environment if it does not yet exist, possibly installing
    # CSET from source.
    execution time limit = PT30M
        [[[environment]]]
        CSET_ENV_USE_LOCAL_CSET = {{CSET_ENV_USE_LOCAL_CSET|default(False) }}
        {% if CSET_ENV_USE_LOCAL_CSET|default(False) %}
            CSET_LOCAL_CSET_PATH = {{CSET_LOCAL_CSET_PATH}}
        {% endif %}

    [[install_website_skeleton]]
    # Copies the static files that make up the web interface.
        [[[environment]]]
        WEB_DIR = {{WEB_DIR}}

    {% for model in models %}
    [[fetch_fcst_m{{model["id"]}}]]
    # Fetch data from disk or a file based archival system.
    inherit = FETCH_DATA
        [[[environment]]]
        MODEL_IDENTIFIER = {{model["id"]}}
        ROSE_APP_COMMAND_KEY = {{model["data_source"]}}
        DATA_PATH = {{model["data_path"]}}
        DATE_TYPE = {{model["date_type"]}}
        DATA_PERIOD = {{model["data_period"]}}
        ANALYSIS_OFFSET = {{model["analysis_offset"]}}
    {% endfor %}

    [[housekeeping]]
    # Housekeep unprocessed data files and processed intermediate files.
        [[[environment]]]
        HOUSEKEEPING_MODE = {{HOUSEKEEPING_MODE}}

    [[finish_website]]
    # Updates the workflow info in the web interface.

    [[send_email]]
    # Send email to notify that the workflow is complete.
    platform = localhost
        [[[environment]]]
        WEB_ADDR = {{WEB_ADDR}}
        WEB_DIR = {{WEB_DIR}}


# Include files bring their own graph and runtime sections.
{% for include_file in glob("includes/*.cylc") %}
{% include include_file %}
{% endfor %}

{# Site-specific details that add to (or override) the core suite definition #}
{% include 'site/' ~ SITE ~ '.cylc' %}
