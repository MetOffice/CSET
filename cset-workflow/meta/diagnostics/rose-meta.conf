################################################################################
# Diagnostics
################################################################################

[template variables]

# Surface fields.
[template variables=SURFACE_MODEL_FIELDS]
ns=Diagnostics/Quicklook
title=Surface model fields
description=Field names per model.
help=Variable names for surface variables. The names across a row should match
    the same physical phenomenon, and use the appropriate standard, long, or
    field name, or the STASH code for each model. Blank entries indicate that a
    model does not have that phenomenon, so it will be skipped.

    Ignore the boxes for models that are not enabled.
compulsory=true
element-titles=Model 01,Model 02,Model 03,Model 04,Model 05,Model 06,Model 07,Model 08,Model 09,Model 10
type=quoted,quoted,quoted,quoted,quoted,quoted,quoted,quoted,quoted,quoted
length=:
sort-key=0surface1

[template variables=PLOT_SPATIAL_SURFACE_MODEL_FIELD]
ns=Diagnostics/Quicklook
description=Create plots for the specified surface fields.
type=python_boolean
compulsory=true
sort-key=0surface2

[template variables=DOMAIN_MEAN_SURFACE_TIME_SERIES]
ns=Diagnostics/Quicklook
description=Create time series plot of surface field domain mean.
type=python_boolean
compulsory=true
sort-key=0surface3

[template variables=DOMAIN_SURFACE_HISTOGRAM_SERIES_FIELD]
ns=Diagnostics/Quicklook
description=Create a series of histogram plots for selected surface fields for each cycle time.
type=python_boolean
compulsory=true
sort-key=0surface4

[template variables=SURFACE_SINGLE_POINT_TIME_SERIES]
ns=Diagnostics/Quicklook
description=Plot a time series at a single specified location in a surface field.
help=Include values of desired longitude and latitude.
type=python_boolean
compulsory=true
trigger=template variables=LATITUDE_POINT: True;
        template variables=LONGITUDE_POINT: True;
        template variables=SINGLE_POINT_METHOD: True;
sort-key=0surface5

[template variables=LATITUDE_POINT]
ns=Diagnostics/Quicklook
description=Latitude of selected point in the same coordinate system as the data.
help=The latitude must exist within the domain. Value should be a float: for example, -1.5.
type=real
compulsory=true
sort-key=0surface6

[template variables=LONGITUDE_POINT]
ns=Diagnostics/Quicklook
description=Longitude of selected point in the same coordinate system as the data.
help=The longitude must exist within the domain. Value should be a float: for example, 0.8.
type=real
compulsory=true
sort-key=0surface6

[template variables=SINGLE_POINT_METHOD]
ns=Diagnostics/Quicklook
description=Method used to map model data onto selected gridpoints.
help=Method used to map model data onto selected gridpoints. These are regrid methods available in Iris.
values="Nearest", "Linear"
compulsory=true
sort-key=0surface6


# Pressure level fields.
[template variables=PRESSURE_LEVEL_MODEL_FIELDS]
ns=Diagnostics/Quicklook
title=Pressure level model fields
description=Field names for each model.
help=Variable names for pressure level variables. The names across a row should
    match the same physical phenomenon, and use the appropriate standard, long,
    or field name, or the STASH code for each model. Blank entries indicate that
    a model does not have that phenomenon, so it will be skipped.

    Ignore the boxes for models that are not enabled.
compulsory=true
element-titles=Model 01,Model 02,Model 03,Model 04,Model 05,Model 06,Model 07,Model 08,Model 09,Model 10
type=quoted,quoted,quoted,quoted,quoted,quoted,quoted,quoted,quoted,quoted
length=:
sort-key=1pressure1

[template variables=PRESSURE_LEVELS]
ns=Diagnostics/Quicklook
description=List of pressure levels to generate plots for.
help=A list of integer pressure levels in hPa in python list format. E.g: [850, 1000]
type=python_list
compulsory=true
sort-key=1pressure2

[template variables=PLOT_SPATIAL_PRESSURE_LEVEL_MODEL_FIELD]
ns=Diagnostics/Quicklook
description=Create plots for the specified pressure level fields.
type=python_boolean
compulsory=true
sort-key=1pressure3

[template variables=DOMAIN_MEAN_VERTICAL_PROFILE_SERIES]
ns=Diagnostics/Quicklook
description=Domain averaged vertical profile of pressure levels for each time.
type=python_boolean
compulsory=true
sort-key=1pressure3

[template variables=DOMAIN_HISTOGRAM_SERIES]
ns=Diagnostics/Quicklook
description=Create a series of histogram plots for selected pressure levels for each cycle time.
trigger=template variables=HISTOGRAM_TYPE: True;
type=python_boolean
compulsory=true
sort-key=1pressure4a

[template variables=HISTOGRAM_TYPE]
ns=Diagnostics/Quicklook
description=Type of histogram to plot. "step", "barstacked" or "stepfilled"
help=The type of histogram to plot. Options are "step" for a line histogram or "barstacked", "stepfilled"
values="step","barstacked","stepfilled"
compulsory=true
sort-key=1pressure4b

[template variables=EXTRACT_PLEVEL_TRANSECT]
ns=Diagnostics/Quicklook
description=Plot a cross section of pressure for variables.
help=This functionality extracts data for each variable and extracts a column
     along each point of the transect. The number of points along the transect
     is determined by calculating the length of the transect in degrees, and
     dividing this by the minimum grid spacing within the domain. Additional
     dimensions (time, ensemble) are accepted and returned as a cross section.
     This allows the user to compute slices through features of meteorological
     interest, such as transects through valleys, or through a front as it
     passes through.
type=python_boolean
trigger=template variables=PLEVEL_TRANSECT_STARTCOORDS: True;
        template variables=PLEVEL_TRANSECT_FINISHCOORDS: True;
compulsory=true
sort-key=1pressure5

[template variables=PLEVEL_TRANSECT_STARTCOORDS]
ns=Diagnostics/Quicklook
description=Start latitude, longitude of the cross section.
help=The latitude, longitude coordinate with respect to the model grid where the
     cross section will start i.e. the furthest left hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level).
type=real,real
compulsory=true
sort-key=1pressure6

[template variables=PLEVEL_TRANSECT_FINISHCOORDS]
ns=Diagnostics/Quicklook
description=Finish latitude, longitude of the cross section.
help=The latitude, longitude coordinate with respect to the model grid where the
     cross section will finish i.e. the furthest right hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level).
type=real,real
compulsory=true
sort-key=1pressure6


# Model-level fields.
[template variables=MODEL_LEVEL_MODEL_FIELDS]
ns=Diagnostics/Quicklook
title=Model level model fields
description=Field names for each model.
help=Variable names for model level variables. The names across a row should
    match the same physical phenomenon, and use the appropriate standard, long,
    or field name, or the STASH code for each model. Blank entries indicate that
    a model does not have that phenomenon, so it will be skipped.

    Ignore the boxes for models that are not enabled.
compulsory=true
element-titles=Model 01,Model 02,Model 03,Model 04,Model 05,Model 06,Model 07,Model 08,Model 09,Model 10
type=quoted,quoted,quoted,quoted,quoted,quoted,quoted,quoted,quoted,quoted
length=:
sort-key=2modellevel1

[template variables=UM_MODEL_LEVELS]
ns=Diagnostics/Quicklook
description=List of UM model levels to generate plots for.
help=Include an integer list of model levels in python list format, e.g: [1, 2, 3, 4]
type=python_list
compulsory=true
sort-key=2modellevel2

[template variables=PLOT_SPATIAL_MODEL_LEVEL_MODEL_FIELD]
ns=Diagnostics/Quicklook
description=Create plots for the specified model level fields.
type=python_boolean
compulsory=true
sort-key=2modellevel3

[template variables=DOMAIN_MEAN_VERTICAL_PROFILE_MODELLEVEL_SERIES]
ns=Diagnostics/Quicklook
description=Domain averaged vertical profile for each validity time.
type=python_boolean
compulsory=true
sort-key=2modellevel4

[template variables=EXTRACT_MLEVEL_TRANSECT]
ns=Diagnostics/Quicklook
description=Plot a cross section of model_level_number for variables.
help=This functionality extracts data for each variable and extracts a column
     along each point of the transect. The number of points along the transect
     is determined by calculating the length of the transect in degrees, and
     dividing this by the minimum grid spacing within the domain. Additional
     dimensions (time, ensemble) are accepted and returned as a cross section.
     This allows the user to compute slices through features of meteorological
     interest, such as transects through valleys, or through a front as it
     passes through.
type=python_boolean
trigger=template variables=MLEVEL_TRANSECT_STARTCOORDS: True;
        template variables=MLEVEL_TRANSECT_FINISHCOORDS: True;
compulsory=true
sort-key=2modellevel5

[template variables=MLEVEL_TRANSECT_STARTCOORDS]
ns=Diagnostics/Quicklook
description=Start latitude, longitude of the cross section.
help=The latitude, longitude coordinate with respect to the model grid where the
     cross section will start i.e. the furthest left hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level).
type=real,real
compulsory=true
sort-key=2modellevel6

[template variables=MLEVEL_TRANSECT_FINISHCOORDS]
ns=Diagnostics/Quicklook
description=Finish latitude, longitude of the cross section.
help=The latitude, longitude coordinate with respect to the model grid where the
     cross section will finish i.e. the furthest right hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level).
type=real,real
compulsory=true
sort-key=2modellevel6


# METplus.
[template variables=METPLUS_POINT_STAT]
ns=Diagnostics/Verification
description=Run METplus point stat in the workflow.
help=If True, it will enable the production of verification statistics against
    point observations (i.e. land-synop, sonde,...).
type=python_boolean
trigger=template variables=METPLUS_OPT_CONFIG_KEYS: True;
        template variables=METPLUS_OBS_DIR: True;
compulsory=true
sort-key=met1

[template variables=METPLUS_GRID_STAT]
ns=Diagnostics/Verification
description=Run METplus grid stat in the workflow.
help=If True, it will enable the production of verification statistics against
    gridded data (i.e. radar, analysis,...).
type=python_boolean
trigger=template variables=METPLUS_OPT_CONFIG_KEYS: True;
        template variables=METPLUS_ANA_DIR: True;
compulsory=true
sort-key=met2

[template variables=METPLUS_OPT_CONFIG_KEYS]
ns=Diagnostics/Verification
description=Which METplus configuration to run.
help=Selects the site/model specific configuration to use. The configuration must
    exist as restricted files in
    https://github.com/MetOffice/CSET-workflow/tree/main/app/{app_name}/file
type=quoted
value-hints="metoffice", "niwa"
sort-key=met3

[template variables=METPLUS_OBS_DIR]
ns=Diagnostics/Verification
description=Path to directory containing observations in MET ASCII format.
type=quoted
sort-key=met4

[template variables=METPLUS_ANA_DIR]
ns=Diagnostics/Verification
description=Path to directory containing analysis in MET netcdf format.
type=quoted
sort-key=met5


# Convection diagnostics.
[template variables=DETERMINISTIC_PLOT_CAPE_RATIO]
ns=Diagnostics/Convection
description=Extracts data required for, and calculates the CAPE ratio diagnostic, plotting on a map.
            Required STASH m01s20i114, m01s20i112, m01s20i113.
help=See includes/deterministic_plot_cape_ratio.cylc
type=python_boolean
compulsory=true

[template variables=DETERMINISTIC_PLOT_INFLOW_PROPERTIES]
ns=Diagnostics/Convection
description=Extracts data required for, and calculates the inflow properties diagnostic, plotting on a map.
            Required STASH m01s20i119, m01s00i025, m01s00i033.
help=See includes/deterministic_plot_inflow_properties.cylc
type=python_boolean
compulsory=true


# TODO: Reimplement in https://github.com/MetOffice/CSET/issues/807
# [template variables=SELECT_SUBAREA]
# ns=Diagnostics
# description=Only analyse a subset of the region defined by the input data.
# help=Select this option to run a recipe over a defined latitude-longitude range.
# trigger=template variables=SUBAREA_LAT_BOUND_TOP: True;
#        =template variables=SUBAREA_LAT_BOUND_BOTTOM: True;
#        =template variables=SUBAREA_LON_BOUND_LEFT: True;
#        =template variables=SUBAREA_LON_BOUND_RIGHT: True;
# type=python_boolean
# compulsory=true
# sort-key=subsection1

# [template variables=SUBAREA_LAT_BOUND_TOP]
# ns=Diagnostics
# description=Top edge coordinate of the sub-area, real.
# help=Recommend looking at the input data to get these values. Uses the grid’s native units.
# type=real
# sort-key=subsection2
# compulsory=true

# [template variables=SUBAREA_LAT_BOUND_BOTTOM]
# ns=Diagnostics
# description=Bottom edge coordinate of the sub-area, real.
# help=Recommend looking at the input data to get these values. Uses the grid’s native units.
# type=real
# sort-key=subsection2
# compulsory=true

# [template variables=SUBAREA_LON_BOUND_LEFT]
# ns=Diagnostics
# description=Left edge coordinate of the sub-area, real.
# help=Recommend looking at the input data to get these values. Uses the grid’s native units.
# type=real
# sort-key=subsection2
# compulsory=true

# [template variables=SUBAREA_LON_BOUND_RIGHT]
# ns=Diagnostics
# description=Right edge coordinate of the sub-area, real.
# help=Recommend looking at the input data to get these values. Uses the grid’s native units.
# type=real
# sort-key=subsection2
# compulsory=true


# TODO: Convert in https://github.com/MetOffice/CSET/issues/808
[template variables=BASIC_QQ_PLOT]
ns=Diagnostics
description=Create a basic quantile-quantile plot for variables specified collapsing over specified coordinates.
            Produces a single Q-Q plot and so requires collapsing across all coordinates in the file.
help=The quantiles defined for each variable are 0, 0.001, 0.01,
     0.1,1,5,10,15,20,25,30,40,50,60,70,75,80,85,90,95,99,99.9,99.99,
     99.999,100.
     If more than one variable is supplied e.g. MODEL_FIELDS_A='a','b',...;
     MODEL_FIELDS_B='c','d',...; the Q-Q plot will compare 'a' vs. 'c',
     'b' vs. 'd', etc.
     It is expected that the length of MODEL_FIELDS_A is the same as
     MODEL_FIELDS_B.
trigger=template variables=MODEL_FIELDS_A: True;
        template variables=VERTICAL_COORDINATE_A: True;
        template variables=LEVELS_A: True;
        template variables=MODEL_FIELDS_B: True;
        template variables=VERTICAL_COORDINATE_B: True;
        template variables=LEVELS_B: True;
        template variables=COORDINATE_LIST: True;
        template variables=ONE_TO_ONE: True;
type=python_boolean
compulsory=true
sort-key=qq1

[template variables=MODEL_FIELDS_A]
ns=Diagnostics
description=List of standard names for model fields to plot on y axis.
            Must be the same length as MODEL_FIELDS_B.
help=Include a list of variable names in python list format["var1","var2"].
type=python_list
compulsory=true
sort-key=qq1a

[template variables=VERTICAL_COORDINATE_A]
ns=Diagnostics
description=Level coordinate name about which to constrain. The length of this
            list should be the same as MODEL_FIELDS A.
help=Include a list of coordinate names in python list format["var1","var2"].
     If single levels are required use any vertical coordinate in the cube and
     make sure to put LEVELS_A as [].
type=python_list
compulsory=true
sort-key=qq1b

[template variables=LEVELS_A]
ns=Diagnostics
description=A list of levels to constrain over. The length of this
            list should be the same as MODEL_FIELDS A.
help=Use "*" for all levels, INTEGERS for specific levels, and [] for no levels
     (e.g., single level fields).
type=python_list
compulsory=true
sort-key=qq1c

[template variables=MODEL_FIELDS_B]
ns=Diagnostics
description=List of standard names for model fields to plot on x axis.
            Must be the same length as MODEL_FIELDS_A.
help=Include a list of variable names in python list format["var1","var2"].
type=python_list
compulsory=true
sort-key=qq1d

[template variables=VERTICAL_COORDINATE_B]
ns=Diagnostics
description=Level coordinate name about which to constrain. The length of this
            list should be the same as MODEL_FIELDS B.
help=Include a list of coordinate names in python list format["var1","var2"]. If
    single levels are required use any vertical coordinate in the cube and make
    sure to put LEVELS_B as [].
type=python_list
compulsory=true
sort-key=qq1e

[template variables=LEVELS_B]
ns=Diagnostics
description=A list of levels to constrain over. The length of this
            list should be the same as MODEL_FIELDS B.
help=Use "*" for all levels, INTEGERS for specific levels, and [] for no levels
    (e.g., single level fields).
type=python_list
compulsory=true
sort-key=qq1f

[template variables=COORDINATE_LIST]
ns=Diagnostics
description=List of coordinates to collapse the percentiles over. The coordinate
    list must be of the form [\\"var1\\",\\"var2\\",...]. The values should be
    all of the coordinates in the cube to ensure the output is 1D with the
    percentiles as the coordinate.
help=Include a list of coordinates in python list format[\\"var1\\",\\"var2\\"].
type=quoted
compulsory=true
sort-key=qq1g

[template variables=ONE_TO_ONE]
ns=Diagnostics
description=One-to-one line option for plots.
help=Set to True if you want a one-to-one line; false if not.
type=python_boolean
compulsory=true
sort-key=qq1h
