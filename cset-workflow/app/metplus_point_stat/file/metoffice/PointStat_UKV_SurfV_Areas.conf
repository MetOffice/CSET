[config]

# List of applications to run - only PointStat for this case
PROCESS_LIST = PointStat(AreasNear), PointStat(AreasBilin)

# Selection of qc flag entries to include in the output.
# Leave blank to include everything
# Need to directly match what is stored in obs file (include leading zeros if present)
POINT_STAT_OBS_QUALITY_INC = 
POINT_STAT_OBS_QUALITY_EXC = -99

# fields to compare
# Note: If FCST_VAR<n>_* is set, then a corresponding OBS_VAR<n>_* variable must be set
# To use one variables for both forecast and observation data, set BOTH_VAR<n>_* instead

file_type=NETCDF_NCCF
FCST_VAR1_NAME = x_wind
FCST_VAR1_LEVELS = "(*,*)"
FCST_VAR1_THRESH = [<=5.0, <=10.0, <=13.0, <=17.5]
FCST_VAR1_OPTIONS = set_attr_level="Z10"; is_u_wind=true
OBS_VAR1_NAME = UGRD
OBS_VAR1_OPTIONS = set_attr_level="Z10"; is_u_wind=true
OBS_VAR1_THRESH = [<=5.0, <=10.0, <=13.0, <=17.5]
OBS_VAR1_LEVELS = Z10
FCST_VAR2_NAME = y_wind
FCST_VAR2_LEVELS = "(*,*)"
FCST_VAR2_THRESH = [<=5.0, <=10.0, <=13.0, <=17.5]
FCST_VAR2_OPTIONS = set_attr_level="Z10"; is_v_wind=true
OBS_VAR2_NAME = VGRD
OBS_VAR2_OPTIONS = set_attr_level="Z10"; is_v_wind=true
OBS_VAR2_THRESH = [<=5.0, <=10.0, <=13.0, <=17.5]
OBS_VAR2_LEVELS = Z10

# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the MET point_stat configuration file.
POINT_STAT_MASK_POLY={MET_AREA_DIR}/poly_umukv.nc
POINT_STAT_MASK_SID={MET_STN_DIR}/2011.stns,
                    {MET_STN_DIR}/2014.stns,
                    {MET_STN_DIR}/2015.stns,
                    {MET_STN_DIR}/2020.stns,
                    {MET_STN_DIR}/2024.stns,
                    {MET_STN_DIR}/2103.stns
POINT_STAT_MASK_LLPNT=

#POINT_STAT_OUTPUT_PREFIX = Surface_WindData_{MODEL}_G000
POINT_STAT_ONCE_PER_FIELD = False

# Select the type of output file(s) you wish to create
POINT_STAT_OUTPUT_FLAG_FHO = BOTH
POINT_STAT_OUTPUT_FLAG_CTC = BOTH
POINT_STAT_OUTPUT_FLAG_CTS = BOTH
POINT_STAT_OUTPUT_FLAG_MCTC = BOTH
#POINT_STAT_OUTPUT_FLAG_MCTS =
POINT_STAT_OUTPUT_FLAG_CNT = BOTH
POINT_STAT_OUTPUT_FLAG_SL1L2 = BOTH
#POINT_STAT_OUTPUT_FLAG_SAL1L2 =
POINT_STAT_OUTPUT_FLAG_VL1L2 = BOTH
#POINT_STAT_OUTPUT_FLAG_VAL1L2 =
POINT_STAT_OUTPUT_FLAG_VCNT = BOTH
#POINT_STAT_OUTPUT_FLAG_PCT =
#POINT_STAT_OUTPUT_FLAG_PSTD =
#POINT_STAT_OUTPUT_FLAG_PJC =
#POINT_STAT_OUTPUT_FLAG_PRC =
#POINT_STAT_OUTPUT_FLAG_ECNT =
#POINT_STAT_OUTPUT_FLAG_RPS =
#POINT_STAT_OUTPUT_FLAG_ECLV =
POINT_STAT_OUTPUT_FLAG_MPR = NONE

# End of [config] section and start of [dir] section
[dir]

# Directory containing forecast input to PointStat
FCST_POINT_STAT_INPUT_DIR = {INPUT_BASE_FORECAST}_vec

# End of [dir] section and start of [filename_templates] section

[filename_templates]

# Template to look for observation input to PointStat relative to OBS_POINT_STAT_INPUT_DIR
#OBS_POINT_STAT_INPUT_TEMPLATE = PYTHON_NUMPY = {ODBSCRIPT_DIR}/PointStat_ReadODB.py {INPUT_BASE_OBSERVATION}/{valid?fmt=%Y%m%d}T{valid?fmt=%H%M}Z_ukv_surface_odb2 {INPUT_BASE_OBSERVATION}/{MODEL}_{valid?fmt=%Y%m%d}T{valid?fmt=%H}00Z_surf_{lead?fmt=%3H}v.csv True
OBS_POINT_STAT_INPUT_TEMPLATE = Surface_{valid?fmt=%Y%m%d}T{valid?fmt=%H}00Z.nc

[AreasNear]

POINT_STAT_INTERP_TYPE_METHOD = NEAREST
POINT_STAT_INTERP_TYPE_WIDTH = 1
POINT_STAT_OUTPUT_PREFIX = Surface_WindData_{MODEL}_Nearest_G000

[AreasBilin]

POINT_STAT_INTERP_TYPE_METHOD = BILIN
POINT_STAT_INTERP_TYPE_WIDTH = 2
POINT_STAT_OUTPUT_PREFIX = Surface_WindData_{MODEL}_Bilin_G000
