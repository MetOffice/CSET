[config]

# List of applications to run - only PointStat for this case
PROCESS_LIST = PointStat

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = VALID

# Format of VALID_BEG and VALID_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
VALID_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match VALID_TIME_FMT
VALID_BEG = {TIMESTRING}

# End time for METplus run - must match VALID_TIME_FMT
VALID_END = {TIMESTRING}

# Increment between METplus runs (in seconds if no units are specified)
#  Must be >= 60 seconds
VALID_INCREMENT = 60M

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {FCAST_LEADS}

# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
LOOP_ORDER = processes

# Verbosity of MET output - overrides LOG_VERBOSITY for PointStat only
LOG_POINT_STAT_VERBOSITY = 3

# Location of MET config file to pass to GridStat
# References PARM_BASE which is the location of the parm directory corresponding
# to the ush directory of the master_metplus.py script that is called
# or the value of the environment variable METPLUS_PARM_BASE if set
POINT_STAT_CONFIG_FILE = {ADD_CONFIG}

# Time relative to each input file's valid time (in seconds if no units are specified) for data within the file to be
# considered valid. Values are set in the 'obs_window' dictionary in the PointStat config file
OBS_POINT_STAT_WINDOW_BEGIN = -1800
OBS_POINT_STAT_WINDOW_END = 1800

# Optional list of offsets to look for point observation data
POINT_STAT_OFFSETS = 0

# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL = METO_UKV
OBTYPE = METO

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
POINT_STAT_REGRID_TO_GRID = NONE

POINT_STAT_OUTPUT_PREFIX = {MODEL}_G000

# sets the -obs_valid_beg command line argument (optional)
# not used for this example
#POINT_STAT_OBS_VALID_BEG = {valid?fmt=%Y%m%d_%H}

# sets the -obs_valid_end command line argument (optional)
# not used for this example
#POINT_STAT_OBS_VALID_END = {valid?fmt=%Y%m%d_%H}

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
POINT_STAT_GRID = 

# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the MET point_stat configuration file.
#POINT_STAT_MASK_POLY = /data/users/cfrd/METplus_playaround/AreaMasks/poly_globe.nc
#POINT_STAT_MASK_POLY =  /data/users/cfrd/METplus_playaround/AreaMasks/poly_umukv.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_umafr.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_ummde.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_umper.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_umit4.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_umflk.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_umge4.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_umlv4.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_umsam.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_umuk4.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_umnae.nc,\
#                      /data/users/cfrd/METplus_playaround/AreaMasks/poly_area2.nc
#POINT_STAT_MASK_SID=/data/users/cfrd/METplus_playaround/StationLists/2011.stns,
#                    /data/users/cfrd/METplus_playaround/StationLists/2014.stns,
#                    /data/users/cfrd/METplus_playaround/StationLists/2015.stns,
#                    /data/users/cfrd/METplus_playaround/StationLists/2103.stns
#POINT_STAT_MASK_LLPNT={ name = "111"; lat_thresh = >=20; lon_thresh = NA; },
#                      { name = "112"; lat_thresh = <=20&&>=-20; lon_thresh = NA; },
#                      { name = "113"; lat_thresh = <=-20; lon_thresh = NA; },
#                      { name = "114"; lat_thresh = <=-30; lon_thresh = NA; },
#                      { name = "115"; lat_thresh = <=30&&>=-30; lon_thresh = NA; },
#                      { name = "116"; lat_thresh = <=-30; lon_thresh = NA; },
#                      { name = "141"; lat_thresh = >=25&&<=60; lon_thresh = >=-145&&<=-50; },
#                      { name = "142"; lat_thresh = >=25&&<=70; lon_thresh = >=-10&&<=28; },
#                      { name = "143"; lat_thresh = >=25&&<=65; lon_thresh = >=60&&<=145; },
#                      { name = "144"; lat_thresh = >=-55&&<=-10; lon_thresh = >=90&&<=180; },
#                      { name = "146"; lat_thresh = <=40&&>=-40; lon_thresh = >=-20&&<=52; },
#                      { name = "161"; lat_thresh = <=20&&>=-20; lon_thresh = >0&&<=60; },
#                      { name = "162"; lat_thresh = <=20&&>=-20; lon_thresh = >60&&<=120; },
#                      { name = "163"; lat_thresh = <=20&&>=-20; lon_thresh = >120&&<=180; },
#                      { name = "164"; lat_thresh = <=20&&>=-20; lon_thresh = >-180&&<=-120; },
#                      { name = "165"; lat_thresh = <=20&&>=-20; lon_thresh = >-120&&<=-60; },
#                      { name = "166"; lat_thresh = <=20&&>=-20; lon_thresh = >-60&&<=0; },
#                      { name = "173"; lat_thresh = >=60; lon_thresh = NA; },
#                      { name = "174"; lat_thresh = <=-60; lon_thresh = NA; }

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
POINT_STAT_MESSAGE_TYPE = SURFACE
POINT_STAT_MESSAGE_TYPE_GROUP_MAP = { key = "SURFACE"; val = "11600,10101,10102,10201,10202,10204,10210,10310"; }, { key = "10101"; val = "10101"; }, { key = "10102"; val = "10102"; }, { key = "10201"; val = "10201"; }, { key = "10202"; val = "10202"; }, { key = "10204"; val = "10204"; }, { key = "10210"; val = "10210"; }, { key = "10310"; val = "10310"; }, { key = "SREW"; val = "10500"; }, { key = "UPPERAIR"; val = "50101,50102,50201,50202"; }, { key = "50101"; val = "50101"; }, { key = "50102"; val = "50102"; }, { key = "50201"; val = "50201"; }, { key = "50202"; val = "50202"; }, { key = "AIRC_AM"; val = "30100"; }, { key = "AIRC_AI"; val = "30200"; }, { key = "AIRC_ALL"; val = "30100,30200"; }, { key = "SATW"; val = "22501,22505,22503,23531,23502,23053,23501,23532"; }

# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME, FCST_VARn_LEVELS,
# (optional) FCST_VARn_OPTION

# set to True to run PointStat once for each name/level combination
# set to False to run PointStat once per run time including all fields
POINT_STAT_ONCE_PER_FIELD = False


# End of [config] section and start of [dir] section
[dir]
FCST_POINT_STAT_INPUT_DIR = {INPUT_BASE_FORECAST}
OBS_POINT_STAT_INPUT_DIR = {INPUT_BASE_OBSERVATION}

# directory containing climatology mean input to PointStat
# Not used in this example
POINT_STAT_CLIMO_MEAN_INPUT_DIR =

# directory containing climatology mean input to PointStat
# Not used in this example
POINT_STAT_CLIMO_STDEV_INPUT_DIR =


POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE_RES}


# Select the type of output file(s) you wish to create
#POINT_STAT_OUTPUT_FLAG_FHO =
#POINT_STAT_OUTPUT_FLAG_CTC =
#POINT_STAT_OUTPUT_FLAG_CTS =
#POINT_STAT_OUTPUT_FLAG_MCTC =
#POINT_STAT_OUTPUT_FLAG_MCTS =
POINT_STAT_OUTPUT_FLAG_CNT = BOTH
POINT_STAT_OUTPUT_FLAG_SL1L2 = BOTH
#POINT_STAT_OUTPUT_FLAG_SAL1L2 =
POINT_STAT_OUTPUT_FLAG_VL1L2 = NONE
#POINT_STAT_OUTPUT_FLAG_VAL1L2 =
#POINT_STAT_OUTPUT_FLAG_VCNT =
#POINT_STAT_OUTPUT_FLAG_PCT =
#POINT_STAT_OUTPUT_FLAG_PSTD =
#POINT_STAT_OUTPUT_FLAG_PJC =
#POINT_STAT_OUTPUT_FLAG_PRC =
#POINT_STAT_OUTPUT_FLAG_ECNT =
#POINT_STAT_OUTPUT_FLAG_RPS =
#POINT_STAT_OUTPUT_FLAG_ECLV =
POINT_STAT_OUTPUT_FLAG_MPR = NONE

# End of [dir] section and start of [filename_templates] section
[filename_templates]

# Template to look for forecast input to PointStat relative to FCST_POINT_STAT_INPUT_DIR
FCST_POINT_STAT_INPUT_TEMPLATE = prods_op_ukv_{init?fmt=%Y%m%d}_{init?fmt=%H}_{lead?fmt=%3H}.nc

# Template to look for observation input to PointStat relative to OBS_POINT_STAT_INPUT_DIR
#OBS_POINT_STAT_INPUT_TEMPLATE = PYTHON_NUMPY = /data/users/cfrd/METplus_playaround/PythonScripts/PointStat_ReadODB.py {INPUT_BASE_OBSERVATION}/{valid?fmt=%Y%m%d}T{valid?fmt=%H%M}Z_ukv_surface_odb2 {INPUT_BASE_OBSERVATION}/{MODEL}_{valid?fmt=%Y%m%d}T{valid?fmt=%H}00Z_{lead?fmt=%3H}_ukv.csv

# Template to look for climatology input to PointStat relative to POINT_STAT_CLIMO_MEAN_INPUT_DIR
# Not used in this example
POINT_STAT_CLIMO_MEAN_INPUT_TEMPLATE =

# Template to look for climatology input to PointStat relative to POINT_STAT_CLIMO_STDEV_INPUT_DIR
# Not used in this example
POINT_STAT_CLIMO_STDEV_INPUT_TEMPLATE =

POINT_STAT_OUTPUT_TEMPLATE = {valid?fmt=%Y%m%d}

