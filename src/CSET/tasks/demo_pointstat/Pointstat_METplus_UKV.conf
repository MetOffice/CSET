[config]

# List of applications to run - only PointStat for this case
PROCESS_LIST = PointStat

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of VALID_BEG and VALID_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {TIMESTRING}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {TIMESTRING}

# Increment between METplus runs (in seconds if no units are specified)
#  Must be >= 60 seconds
INIT_INCREMENT = 60M

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = begin_end_incr(0,120,1)

# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
#LOOP_ORDER = processes

# Verbosity of MET output - overrides LOG_VERBOSITY for PointStat only
LOG_POINT_STAT_VERBOSITY = 2

# Location of MET config file to pass to GridStat
# References PARM_BASE which is the location of the parm directory corresponding
# to the ush directory of the master_metplus.py script that is called
# or the value of the environment variable METPLUS_PARM_BASE if set
POINT_STAT_CONFIG_FILE = {ADD_CONFIG}

# Time relative to each input file's valid time (in seconds if no units are
# specified) for data within the file to be considered valid. Values are set in
# the 'obs_window' dictionary in the PointStat config file
OBS_POINT_STAT_WINDOW_BEGIN = -1800
OBS_POINT_STAT_WINDOW_END = 1800

# Optional list of offsets to look for point observation data
POINT_STAT_OFFSETS = 0

# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL = METO_UKV
OBTYPE = METO

# fields to compare
# Note: If FCST_VAR<n>_* is set, then a corresponding OBS_VAR<n>_* variable must
# be set To use one variables for both forecast and observation data, set
# BOTH_VAR<n>_* instead

FCST_VAR1_NAME = air_temperature
# This is temporary - only works with the full forecast_period set
FCST_VAR1_LEVELS = "({lead?fmt=%H},*,*)"
FCST_VAR1_OPTIONS = set_attr_name="T2M"; set_attr_level="Z0"
OBS_VAR1_NAME = TMP
OBS_VAR1_OPTIONS = set_attr_name="T2M"
OBS_VAR1_LEVELS = Z0

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
POINT_STAT_REGRID_TO_GRID = NONE

POINT_STAT_OUTPUT_PREFIX = {MODEL}_G000

# sets the -obs_valid_beg command line argument (optional)
# not used for this example
#POINT_STAT_OBS_VALID_BEG = {valid?fmt=%Y%m%d_%H}

# sets the -obs_valid_end command line argument (optional)
# not used for this example
#POINT_STAT_OBS_VALID_END = {valid?fmt=%Y%m%d_%H}

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
POINT_STAT_GRID =


# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
POINT_STAT_MESSAGE_TYPE = SURFACE

# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME, FCST_VARn_LEVELS,
# (optional) FCST_VARn_OPTION

# set to True to run PointStat once for each name/level combination
# set to False to run PointStat once per run time including all fields
POINT_STAT_ONCE_PER_FIELD = False


# End of [config] section and start of [dir] section
[dir]
FCST_POINT_STAT_INPUT_DIR = {INPUT_BASE_FORECAST}
OBS_POINT_STAT_INPUT_DIR = {INPUT_BASE_OBSERVATION}

# directory containing climatology mean input to PointStat
# Not used in this example
POINT_STAT_CLIMO_MEAN_INPUT_DIR =

# directory containing climatology mean input to PointStat
# Not used in this example
POINT_STAT_CLIMO_STDEV_INPUT_DIR =


POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE_RES}


# Select the type of output file(s) you wish to create
#POINT_STAT_OUTPUT_FLAG_FHO =
#POINT_STAT_OUTPUT_FLAG_CTC =
#POINT_STAT_OUTPUT_FLAG_CTS =
#POINT_STAT_OUTPUT_FLAG_MCTC =
#POINT_STAT_OUTPUT_FLAG_MCTS =
POINT_STAT_OUTPUT_FLAG_CNT = BOTH
POINT_STAT_OUTPUT_FLAG_SL1L2 = BOTH
#POINT_STAT_OUTPUT_FLAG_SAL1L2 =
POINT_STAT_OUTPUT_FLAG_VL1L2 = NONE
#POINT_STAT_OUTPUT_FLAG_VAL1L2 =
POINT_STAT_OUTPUT_FLAG_VCNT = NONE
#POINT_STAT_OUTPUT_FLAG_PCT =
#POINT_STAT_OUTPUT_FLAG_PSTD =
#POINT_STAT_OUTPUT_FLAG_PJC =
#POINT_STAT_OUTPUT_FLAG_PRC =
#POINT_STAT_OUTPUT_FLAG_ECNT =
#POINT_STAT_OUTPUT_FLAG_RPS =
#POINT_STAT_OUTPUT_FLAG_ECLV =
POINT_STAT_OUTPUT_FLAG_MPR = BOTH

# End of [dir] section and start of [filename_templates] section
[filename_templates]

# Template to look for forecast input to PointStat relative to FCST_POINT_STAT_INPUT_DIR
FCST_POINT_STAT_INPUT_TEMPLATE = out.nc

# Template to look for observation input to PointStat relative to OBS_POINT_STAT_INPUT_DIR
OBS_POINT_STAT_INPUT_TEMPLATE = lndsyn_{valid?fmt=%Y%m%d%H}.nc

# Template to look for climatology input to PointStat relative to POINT_STAT_CLIMO_MEAN_INPUT_DIR
# Not used in this example
POINT_STAT_CLIMO_MEAN_INPUT_TEMPLATE =

# Template to look for climatology input to PointStat relative to POINT_STAT_CLIMO_STDEV_INPUT_DIR
# Not used in this example
POINT_STAT_CLIMO_STDEV_INPUT_TEMPLATE =

POINT_STAT_OUTPUT_TEMPLATE = Output
