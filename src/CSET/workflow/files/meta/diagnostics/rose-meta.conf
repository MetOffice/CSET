################################################################################
# Diagnostics
################################################################################

[Diagnostics]
ns=Diagnostics
sort-key=sec-c
title=Diagnostic options

[template variables=SHOW_CASE_STUDY_AGGREGATE_OPTIONS]
ns=Diagnostics
description=Show case study aggregation toggles.
type=python_boolean
compulsory=true
trigger=template variables=SPATIAL_SURFACE_FIELD_AGGREGATION: True;
        template variables=SPATIAL_DIFFERENCE_SURFACE_FIELD_AGGREGATION: True;
        template variables=TIMESERIES_SURFACE_FIELD_AGGREGATION: True;
	template variables=HISTOGRAM_SURFACE_FIELD_AGGREGATION: True;
        template variables=SPATIAL_PLEVEL_FIELD_AGGREGATION: True;
	template variables=SPATIAL_DIFFERENCE_PLEVEL_FIELD_AGGREGATION: True;
	template variables=TIMESERIES_PLEVEL_FIELD_AGGREGATION: True;
	template variables=HISTOGRAM_PLEVEL_FIELD_AGGREGATION: True;
        template variables=PROFILE_PLEVEL_AGGREGATION: True;
        template variables=SPATIAL_MLEVEL_FIELD_AGGREGATION: True;
	template variables=SPATIAL_DIFFERENCE_MLEVEL_FIELD_AGGREGATION: True;
	template variables=TIMESERIES_MLEVEL_FIELD_AGGREGATION: True;
	template variables=HISTOGRAM_MLEVEL_FIELD_AGGREGATION: True;
        template variables=PROFILE_MLEVEL_AGGREGATION: True;
sort-key=0aggregate

################################################################################
# Spatial (2D map) fields
################################################################################

[Diagnostics/Fields]
ns=Diagnostics/Fields
sort-key=sec-c1
title=Surface (2D) fields

# Surface fields.
[template variables=SURFACE_FIELDS]
ns=Diagnostics/Fields
title=Surface (2D) fields
description=Surface (2D) diagnostic variables for analysis.
help=Quoted variable names for surface (2D) variables. The names should follow CF naming
    conventions, and will be translated appropriately. Where applicable, a STASH code in
    the format "m??s??i???" maybe be used instead.
compulsory=true
type=python_list
sort-key=0surface1

[template variables=SPATIAL_SURFACE_FIELD]
ns=Diagnostics/Fields
description=Create spatially mapped plots for the specified surface fields.
type=python_boolean
compulsory=true
sort-key=0surface2

[template variables=SPATIAL_SURFACE_FIELD_AGGREGATION]
ns=Diagnostics/Fields
description=Create case aggregated spatial plots for the specified surface fields.
            Select all options required.
       Option1: Average by lead time.
       Option2: Average by hour of day.
       Option3: Average by validity time
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=0surface2b

[template variables=SPATIAL_DIFFERENCE_SURFACE_FIELD]
ns=Diagnostics/Fields
description=Create spatially mapped difference plots for the specified surface fields.
type=python_boolean
compulsory=true
sort-key=0surface3

[template variables=SPATIAL_DIFFERENCE_SURFACE_FIELD_AGGREGATION]
ns=Diagnostics/Fields
description=Create case aggregated spatial difference plots for the specified surface fields.
            Select all options required.
       Option1: Average by lead time.
       Option2: Average by hour of day.
       Option3: Average by validity time
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=0surface3b

[template variables=TIMESERIES_SURFACE_FIELD]
ns=Diagnostics/Fields
description=Create time series plots of specified surface fields.
            Calculated as domain (or sub-area) mean.
type=python_boolean
compulsory=true
sort-key=0surface4

[template variables=TIMESERIES_SURFACE_FIELD_AGGREGATION]
ns=Diagnostics/Fields
description=Create case aggregated time series plots of specified surface fields.
            Select all options required.
       Option1: Average by lead time.
       Option2: Average by hour of day.
       Option3: Average by validity time
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=0surface4

[template variables=HISTOGRAM_SURFACE_FIELD]
ns=Diagnostics/Fields
description=Create histogram plots of specified surface fields [[for each cycle time]].
type=python_boolean
compulsory=true
sort-key=0surface5

[template variables=HISTOGRAM_SURFACE_FIELD_AGGREGATION]
ns=Diagnostics/Fields
description=Create case aggregated histogram plots of specified surface fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time
       Option4: All cases aggregated to single histogram
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=0surface5

[template variables=SURFACE_SINGLE_POINT_TIME_SERIES]
ns=Diagnostics/Fields
description=Plot a time series at a single specified location in a surface field.
help=Include values of desired longitude and latitude.
type=python_boolean
compulsory=true
trigger=template variables=LATITUDE_POINT: True;
        template variables=LONGITUDE_POINT: True;
        template variables=LATLON_IN_TYPE: True;
        template variables=SINGLE_POINT_METHOD: True;
sort-key=0surface6

[template variables=LATITUDE_POINT]
ns=Diagnostics/Fields
description=Latitude of selected point.
help=The latitude must exist within the domain. Value should be a float: for example, -1.5.
type=real
compulsory=true
sort-key=0surface6-b

[template variables=LONGITUDE_POINT]
ns=Diagnostics/Fields
description=Longitude of selected point.
help=The longitude must exist within the domain. Value should be a float: for example, 0.8.
type=real
compulsory=true
sort-key=0surface6-c

[template variables=LATLON_IN_TYPE]
ns=Diagnostics/Fields
description=Method used to map model data onto selected gridpoints.
help=This switch indicates whether the selected latitude longitude coordinates are on the real world grid or
    the rotated grid specified by the input data.
values="realworld", "rotated"
compulsory=true
sort-key=0surface6-a

[template variables=SINGLE_POINT_METHOD]
ns=Diagnostics/Fields
description=Method used to map model data onto selected gridpoints.
help=Method used to map model data onto selected gridpoints. These are regrid methods available in Iris.
values="Nearest", "Linear"
compulsory=true
sort-key=0surface6-d

#######################################################################
# Pressure level fields.
[Diagnostics/Pressure]
ns=Diagnostics/Pressure
sort-key=sec-c2
title=Pressure level fields

[template variables=PRESSURE_LEVEL_FIELDS]
ns=Diagnostics/Pressure
title=Pressure level fields
description=Pressure level diagnosic variables for analysis.
help=Quoted variable names for pressure level variables. The names should follow CF naming
    conventions, and will be translated appropriately. Where applicable, a STASH code in
    the format "m??s??i???" maybe be used instead.
compulsory=true
type=python_list
sort-key=1pressure1

[template variables=PRESSURE_LEVELS]
ns=Diagnostics/Pressure
description=List of pressure levels to generate plots for.
help=A list of integer pressure levels in hPa in python list format. E.g: [850, 1000]
type=python_list
compulsory=true
sort-key=1pressure2

[template variables=SPATIAL_PLEVEL_FIELD]
ns=Diagnostics/Pressure
description=Create spatially mapped plots for the specified pressure level fields.
type=python_boolean
compulsory=true
sort-key=1pressure3

[template variables=SPATIAL_PLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/Pressure
description=Create case aggregated spatial plots for the specified pressure level fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=1pressure3b

[template variables=SPATIAL_DIFFERENCE_PLEVEL_FIELD]
ns=Diagnostics/Pressure
description=Create spatially mapped difference plots for the specified pressure level fields.
type=python_boolean
compulsory=true
sort-key=1pressure4

[template variables=SPATIAL_DIFFERENCE_PLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/Pressure
description=Create case aggregated spatial difference plots for the specified pressure level fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=1pressure4b

[template variables=TIMESERIES_PLEVEL_FIELD]
ns=Diagnostics/Pressure
description=Create time series plots for the specified pressure level fields.
            Calculated as domain (or sub-area) mean.
type=python_boolean
compulsory=true
sort-key=1pressure5

[template variables=TIMESERIES_PLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/Pressure
description=Create case aggregated time series plots for the specified pressure level fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=1pressure5b

[template variables=HISTOGRAM_PLEVEL_FIELD]
ns=Diagnostics/Pressure
description=Create histogram plots of specified pressure level fields [[for each cycle time]].
type=python_boolean
compulsory=true
sort-key=1pressure6a

[template variables=HISTOGRAM_PLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/Pressure
description=Create case aggregated histogram plots for specified pressure levels.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time
       Option4: All cases aggregated to single histogram
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=1pressure6b

[template variables=PROFILE_PLEVEL]
ns=Diagnostics/Pressure
description=Domain averaged vertical profile on pressure levels for each time.
type=python_boolean
compulsory=true
sort-key=1pressure7

[template variables=PROFILE_PLEVEL_AGGREGATION]
ns=Diagnostics/Pressure
description=Aggregate domain averaged vertical profile on pressure levels for each time.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time.
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=1pressure7b

[template variables=EXTRACT_PLEVEL_TRANSECT]
ns=Diagnostics/Pressure
description=Plot a cross section of pressure for variables.
help=This functionality extracts data for each variable and extracts a column
     along each point of the transect. The number of points along the transect
     is determined by calculating the length of the transect in degrees, and
     dividing this by the minimum grid spacing within the domain. Additional
     dimensions (time, ensemble) are accepted and returned as a cross section.
     This allows the user to compute slices through features of meteorological
     interest, such as transects through valleys, or through a front as it
     passes through.
type=python_boolean
trigger=template variables=PLEVEL_TRANSECT_STARTCOORDS: True;
        template variables=PLEVEL_TRANSECT_FINISHCOORDS: True;
compulsory=true
sort-key=1pressure8

[template variables=PLEVEL_TRANSECT_STARTCOORDS]
ns=Diagnostics/Pressure
description=Start latitude, longitude of the cross section.
help=The latitude, longitude coordinate in the model coordinate system where the
     cross section will start i.e. the furthest left hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level.
type=real,real
compulsory=true
sort-key=1pressure8a

[template variables=PLEVEL_TRANSECT_FINISHCOORDS]
ns=Diagnostics/Pressure
description=Finish latitude, longitude of the cross section.
help=The latitude, longitude coordinate in the model coordinate system where the
     cross section will finish i.e. the furthest right hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level.
type=real,real
compulsory=true
sort-key=1pressure8b


########################################################################
# Model-level fields.
[Diagnostics/ModelLevel]
ns=Diagnostics/ModelLevel
sort-key=sec-c3
title=Model level fields

[template variables=MODEL_LEVEL_FIELDS]
ns=Diagnostics/ModelLevel
title=Model level fields
description=Model level diagnostic variables for analysis.
help=Quoted variable names for model level variables. The names should follow CF naming
    conventions, and will be translated appropriately. Where applicable, a STASH code in
    the format "m??s??i???" maybe be used instead.
compulsory=true
type=python_list
sort-key=2modellevel1

[template variables=MODEL_LEVELS]
ns=Diagnostics/ModelLevel
description=List of model levels to generate plots for.
help=Include an integer list of model levels in python list format, e.g: [1, 2, 3, 4]
type=python_list
compulsory=true
sort-key=2modellevel2

[template variables=SPATIAL_MLEVEL_FIELD]
ns=Diagnostics/ModelLevel
description=Create spatially mapped plots for the specified model level fields.
type=python_boolean
compulsory=true
sort-key=2modellevel3

[template variables=SPATIAL_MLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/ModelLevel
description=Create case aggregated spatial plots for specified model level fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time.
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=2modellevel3b

[template variables=SPATIAL_DIFFERENCE_MLEVEL_FIELD]
ns=Diagnostics/ModelLevel
description=Create spatially mapped difference plots for the specified model level fields.
type=python_boolean
compulsory=true
sort-key=2modellevel4

[template variables=SPATIAL_DIFFERENCE_MLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/ModelLevel
description=Create case aggregated spatial difference plots for the specified model level fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=2modellevel4b

[template variables=TIMESERIES_MLEVEL_FIELD]
ns=Diagnostics/ModelLevel
description=Create time series plots for the specified model level fields.
            Calculated as domain (or sub-area) mean.
type=python_boolean
compulsory=true
sort-key=2modellevel5

[template variables=TIMESERIES_MLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/ModelLevel
description=Create case aggregated time series plots for the specified model level fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=2modellevel5b

[template variables=HISTOGRAM_MLEVEL_FIELD]
ns=Diagnostics/ModelLevel
description=Create histogram plots of specified model level fields [[for each cycle time]].
type=python_boolean
compulsory=true
sort-key=2modellevel6a

[template variables=HISTOGRAM_MLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/ModelLevel
description=Create case aggregated histogram plots for specified model level fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time
       Option4: All cases aggregated to single histogram
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=2modellevel6b

[template variables=PROFILE_MLEVEL]
ns=Diagnostics/ModelLevel
description=Domain averaged vertical profile on model levels for each validity time.
type=python_boolean
compulsory=true
sort-key=2modellevel7

[template variables=PROFILE_MLEVEL_AGGREGATION]
ns=Diagnostics/ModelLevel
description=Aggregate domain averaged vertical profile on model levels for each time.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time.
type=python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=2modellevel7b

[template variables=EXTRACT_MLEVEL_TRANSECT]
ns=Diagnostics/ModelLevel
description=Plot a cross section of model_level_number for variables.
help=This functionality extracts data for each variable and extracts a column
     along each point of the transect. The number of points along the transect
     is determined by calculating the length of the transect in degrees, and
     dividing this by the minimum grid spacing within the domain. Additional
     dimensions (time, ensemble) are accepted and returned as a cross section.
     This allows the user to compute slices through features of meteorological
     interest, such as transects through valleys, or through a front as it
     passes through.
type=python_boolean
trigger=template variables=MLEVEL_TRANSECT_STARTCOORDS: True;
        template variables=MLEVEL_TRANSECT_FINISHCOORDS: True;
compulsory=true
sort-key=2modellevel8

[template variables=MLEVEL_TRANSECT_STARTCOORDS]
ns=Diagnostics/ModelLevel
description=Start latitude, longitude of the cross section.
help=The latitude, longitude coordinate in the model coordinate system where the
     cross section will start i.e. the furthest left hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level).
type=real,real
compulsory=true
sort-key=2modellevel8b

[template variables=MLEVEL_TRANSECT_FINISHCOORDS]
ns=Diagnostics/ModelLevel
description=Finish latitude, longitude of the cross section.
help=The latitude, longitude coordinate in the model coordinate system where the
     cross section will finish i.e. the furthest right hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level.
type=real,real
compulsory=true
sort-key=2modellevel8c

#######################################################
# Verification
[Diagnostics/Verification]
ns=Diagnostics/Verification
sort-key=sec-c6
title=Verification

[template variables=METPLUS_POINT_STAT]
ns=Diagnostics/Verification
description=Run METplus point stat in the workflow.
help=If True, it will enable the production of verification statistics against
    point observations (i.e. land-synop, sonde,...).
type=python_boolean
trigger=template variables=METPLUS_OPT_CONFIG_KEYS: True;
        template variables=METPLUS_OBS_DIR: True;
compulsory=true
sort-key=met1

[template variables=METPLUS_GRID_STAT]
ns=Diagnostics/Verification
description=Run METplus grid stat in the workflow.
help=If True, it will enable the production of verification statistics against
    gridded data (i.e. radar, analysis,...).
type=python_boolean
trigger=template variables=METPLUS_OPT_CONFIG_KEYS: True;
        template variables=METPLUS_ANA_DIR: True;
compulsory=true
sort-key=met2

[template variables=METPLUS_OPT_CONFIG_KEYS]
ns=Diagnostics/Verification
description=Which METplus configuration to run.
help=Selects the site/model specific configuration to use. The configuration must
    exist as restricted files in
    https://github.com/MetOffice/CSET-workflow/tree/main/app/{app_name}/file
type=quoted
value-hints="metoffice", "niwa"
sort-key=met3

[template variables=METPLUS_OBS_DIR]
ns=Diagnostics/Verification
description=Path to directory containing observations in MET ASCII format.
type=quoted
sort-key=met4

[template variables=METPLUS_ANA_DIR]
ns=Diagnostics/Verification
description=Path to directory containing analysis in MET netcdf format.
type=quoted
sort-key=met5

######################################################
# Process-based and other diagnostics
[Diagnostics/Process]
ns=Diagnostics/Process
sort-key=sec-c4
title=Process-based

# Convection diagnostics.
[Diagnostics/Convection]
ns=Diagnostics/Process/Convection
sort-key=sec-c4a
title=Convection

[template variables=DETERMINISTIC_PLOT_CAPE_RATIO]
ns=Diagnostics/Process/Convection
description=Extracts data required for, and calculates the CAPE ratio diagnostic, plotting on a map.
            Required STASH m01s20i114, m01s20i112, m01s20i113.
help=See includes/deterministic_plot_cape_ratio.cylc
type=python_boolean
compulsory=true

[template variables=DETERMINISTIC_PLOT_INFLOW_PROPERTIES]
ns=Diagnostics/Process/Convection
description=Extracts data required for, and calculates the inflow properties diagnostic, plotting on a map.
            Required STASH m01s20i119, m01s00i025, m01s00i033.
help=See includes/deterministic_plot_inflow_properties.cylc
type=python_boolean
compulsory=true


##############################################################
# QQ plots
[Diagnostics/Process/QQ]
ns=Diagnostics/Process/QQ
sort-key=sec-c5
title=Quantile-Quantile

[template variables=BASIC_QQ_PLOT]
ns=Diagnostics/Process/QQ
description=Create a basic quantile-quantile plot for variables specified collapsing over specified coordinates.
            Produces a single Q-Q plot and so requires collapsing across all coordinates in the file.
help=The quantiles defined for each variable are 0, 0.001, 0.01,
     0.1,1,5,10,15,20,25,30,40,50,60,70,75,80,85,90,95,99,99.9,99.99,
     99.999,100.
     If more than one variable is supplied e.g. MODEL_FIELDS_A='a','b',...;
     MODEL_FIELDS_B='c','d',...; the Q-Q plot will compare 'a' vs. 'c',
     'b' vs. 'd', etc.
     It is expected that the length of MODEL_FIELDS_A is the same as
     MODEL_FIELDS_B.
trigger=template variables=MODEL_FIELDS_A: True;
        template variables=VERTICAL_COORDINATE_A: True;
        template variables=LEVELS_A: True;
        template variables=MODEL_FIELDS_B: True;
        template variables=VERTICAL_COORDINATE_B: True;
        template variables=LEVELS_B: True;
        template variables=COORDINATE_LIST: True;
        template variables=ONE_TO_ONE: True;
type=python_boolean
compulsory=true
sort-key=qq1

[template variables=MODEL_FIELDS_A]
ns=Diagnostics/Process/QQ
description=List of standard names for model fields to plot on y axis.
            Must be the same length as MODEL_FIELDS_B.
help=Include a list of variable names in python list format["var1","var2"].
type=python_list
compulsory=true
sort-key=qq1a

[template variables=VERTICAL_COORDINATE_A]
ns=Diagnostics/Process/QQ
description=Level coordinate name about which to constrain. The length of this
            list should be the same as MODEL_FIELDS A.
help=Include a list of coordinate names in python list format["var1","var2"].
     If single levels are required use any vertical coordinate in the cube and
     make sure to put LEVELS_A as [].
type=python_list
compulsory=true
sort-key=qq1b

[template variables=LEVELS_A]
ns=Diagnostics/Process/QQ
description=A list of levels to constrain over. The length of this
            list should be the same as MODEL_FIELDS A.
help=Use "*" for all levels, INTEGERS for specific levels, and [] for no levels
     (e.g., single level fields).
type=python_list
compulsory=true
sort-key=qq1c

[template variables=MODEL_FIELDS_B]
ns=Diagnostics/Process/QQ
description=List of standard names for model fields to plot on x axis.
            Must be the same length as MODEL_FIELDS_A.
help=Include a list of variable names in python list format["var1","var2"].
type=python_list
compulsory=true
sort-key=qq1d

[template variables=VERTICAL_COORDINATE_B]
ns=Diagnostics/Process/QQ
description=Level coordinate name about which to constrain. The length of this
            list should be the same as MODEL_FIELDS B.
help=Include a list of coordinate names in python list format["var1","var2"]. If
    single levels are required use any vertical coordinate in the cube and make
    sure to put LEVELS_B as [].
type=python_list
compulsory=true
sort-key=qq1e

[template variables=LEVELS_B]
ns=Diagnostics/Process/QQ
description=A list of levels to constrain over. The length of this
            list should be the same as MODEL_FIELDS B.
help=Use "*" for all levels, INTEGERS for specific levels, and [] for no levels
    (e.g., single level fields).
type=python_list
compulsory=true
sort-key=qq1f

[template variables=COORDINATE_LIST]
ns=Diagnostics/Process/QQ
description=List of coordinates to collapse the percentiles over. The coordinate
    list must be of the form [\\"var1\\",\\"var2\\",...]. The values should be
    all of the coordinates in the cube to ensure the output is 1D with the
    percentiles as the coordinate.
help=Include a list of coordinates in python list format[\\"var1\\",\\"var2\\"].
type=quoted
compulsory=true
sort-key=qq1g

[template variables=ONE_TO_ONE]
ns=Diagnostics/Process/QQ
description=One-to-one line option for plots.
help=Set to True if you want a one-to-one line; false if not.
type=python_boolean
compulsory=true
sort-key=qq1h


###################################
# Age of air
[Diagnostics/Process/AOA]
ns=Diagnostics/Process/AOA
sort-key=sec-c5
title=Age of air

[template variables=AOA_DIAG]
ns=Diagnostics/Process/AOA
title=Run age of air diagnostic on specified pressure levels.
description=Run the age of air diagnostic on model data.
help=The age of air diagnostic provides a qualtitative view of how old air is within
     the domain, by calculating a back trajectory at each grid point at each lead time
     to determine when air entered through the lateral boundary. This is useful for
     diagnosing how quickly air ventilates the domain, depending on its size and the
     prevailing meteorology.
     The diagnostic uses the u, v and w components of wind, along with geopotential height to
     perform the back trajectory. Data is first regridded to 0.5 degrees.
     Note: the code here does not consider sub-grid transport, and only uses the postprocessed
     velocity fields and geopotential height. Its applicability is for large-scale flow O(1000 km),
     and not small scale flow where mixing is likely to play a larger role.
type=python_boolean
compulsory=true
trigger=template variables=AOA_PLEV: True;
        template variables=AOA_CYCLIC: True;
sort-key=aoa1

[template variables=AOA_PLEV]
ns=Diagnostics/AOA
title=AOA: Pressure Levels
description=List of pressure levels to calculate the age of air diagnostic.
help=The pressure levels must be specified in hPa, where the variables (U,V,W,Z)
     exist on the pressure level.
type=python_list
compulsory=true
sort-key=aoa2

[template variables=AOA_CYCLIC]
ns=Diagnostics/Process/AOA
title=AOA: Use Cyclic Option
description=If True, LAM is considered cyclic in the east/west direction.
help=This option when True, will allow back trajectories to advect through the east/
     west boundary and continue through the other side of the domain. This is useful
     for large domains such as the cyclic tropical channel, where there is no east/
     west boundary.
type=python_boolean
compulsory=true
sort-key=aoa3
