################################################################################
# Diagnostics
################################################################################

[Diagnostics]
ns=Diagnostics
sort-key=sec-c
title=Diagnostic options

[template variables=SHOW_CASE_STUDY_AGGREGATE_OPTIONS]
ns=Diagnostics
description=Show case study aggregation toggles.
type=python_boolean
compulsory=true
trigger=template variables=SPATIAL_SURFACE_FIELD_AGGREGATION: True;
        template variables=SPATIAL_DIFFERENCE_SURFACE_FIELD_AGGREGATION: True;
        template variables=TIMESERIES_SURFACE_FIELD_AGGREGATION: True;
	template variables=HISTOGRAM_SURFACE_FIELD_AGGREGATION: True;
        template variables=SPATIAL_PLEVEL_FIELD_AGGREGATION: True;
	template variables=SPATIAL_DIFFERENCE_PLEVEL_FIELD_AGGREGATION: True;
	template variables=TIMESERIES_PLEVEL_FIELD_AGGREGATION: True;
	template variables=HISTOGRAM_PLEVEL_FIELD_AGGREGATION: True;
        template variables=PROFILE_PLEVEL_AGGREGATION: True;
        template variables=SPATIAL_MLEVEL_FIELD_AGGREGATION: True;
	template variables=SPATIAL_DIFFERENCE_MLEVEL_FIELD_AGGREGATION: True;
	template variables=TIMESERIES_MLEVEL_FIELD_AGGREGATION: True;
	template variables=HISTOGRAM_MLEVEL_FIELD_AGGREGATION: True;
        template variables=PROFILE_MLEVEL_AGGREGATION: True;
sort-key=0aggregate

################################################################################
# Spatial (2D map) fields
################################################################################

[Diagnostics/Fields]
ns=Diagnostics/Fields
sort-key=sec-c1
title=Surface (2D) fields

# Surface fields.
[template variables=SURFACE_FIELDS]
ns=Diagnostics/Fields
title=Surface (2D) fields
description=Surface (2D) diagnostic variables for analysis.
help=Quoted variable names for surface (2D) variables. The names should follow CF naming
    conventions, and will be translated appropriately. Where applicable, a STASH code in
    the format "m??s??i???" maybe be used instead.
compulsory=true
type=python_list
sort-key=0surface1

[template variables=SPATIAL_SURFACE_FIELD]
ns=Diagnostics/Fields
description=Create spatially mapped plots for the specified surface fields.
type=python_boolean
compulsory=true
sort-key=0surface2

[template variables=SPATIAL_SURFACE_FIELD_METHOD]
ns=Diagnostics/Fields
description=Select analysis method(s) for output mapped plots. Add all options required.
            Leave blank or set to "SEQ" (sequence) for plots each diagnostic output time.
            For time-collapsed outputs over each analysis period, set to "MEAN", "MAX", "MIN", "STD_DEV" etc.
help=Quoted analysis methods. Settings should be based on available iris.analysis methods for collapsing cube dimensions.
type=python_list
compulsory=true
sort-key=0surface2a

[template variables=SPATIAL_SURFACE_FIELD_AGGREGATION]
ns=Diagnostics/Fields
description=Create case aggregated spatial plots for the specified surface fields.
            Select all options required.
       Option1: Aggregate mean by lead time.
       Option2: Aggregate mean by hour of day.
       Option3: Aggregate mean by validity time.
       Option4: All cases aggregated to single mean spatial plot.
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=0surface2b

[template variables=SPATIAL_DIFFERENCE_SURFACE_FIELD]
ns=Diagnostics/Fields
description=Create spatially mapped difference plots for the specified surface fields.
            The analysis method(s) set in SPATIAL_SURFACE_FIELD_METHOD will be used.
type=python_boolean
compulsory=true
sort-key=0surface3

[template variables=SPATIAL_DIFFERENCE_SURFACE_FIELD_AGGREGATION]
ns=Diagnostics/Fields
description=Create case aggregated spatial difference plots for the specified surface fields.
            Select all options required.
       Option1: Aggregate mean by lead time.
       Option2: Aggregate mean by hour of day.
       Option3: Aggregate mean by validity time.
       Option4: All cases aggregated to single mean spatial plot.
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=0surface3b

[template variables=TIMESERIES_SURFACE_FIELD]
ns=Diagnostics/Fields
description=Create time series plots of specified surface fields.
            Calculated as domain (or sub-area) mean.
type=python_boolean
compulsory=true
sort-key=0surface4

[template variables=TIMESERIES_SURFACE_FIELD_AGGREGATION]
ns=Diagnostics/Fields
description=Create case aggregated time series plots of specified surface fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time (requires overlapping times).
       Option4: All cases aggregated to single timeseries (assumes no overlapping times).
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=0surface4

[template variables=HISTOGRAM_SURFACE_FIELD]
ns=Diagnostics/Fields
description=Create histogram plots of specified surface fields.
            Use HISTOGRAM_SURFACE_FIELD_SEQUENCE to set plotting mode.
type=python_boolean
compulsory=true
sort-key=0surface5

[template variables=HISTOGRAM_SURFACE_FIELD_SEQUENCE]
ns=Diagnostics/Fields
description=Select analysis method for output surface field histograms.
            Set to True for histogram at each model output time.
            Set to False for single histogram of all times in output.
type=python_boolean
compulsory=true
sort-key=0surface5a

[template variables=HISTOGRAM_SURFACE_FIELD_AGGREGATION]
ns=Diagnostics/Fields
description=Create case aggregated histogram plots of specified surface fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time
       Option4: All cases aggregated to single histogram
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=0surface5b

[template variables=SURFACE_SINGLE_POINT_TIME_SERIES]
ns=Diagnostics/Fields
description=Plot a time series at a single specified location in a surface field.
help=Include values of desired longitude and latitude.
type=python_boolean
compulsory=true
trigger=template variables=LATITUDE_POINT: True;
        template variables=LONGITUDE_POINT: True;
        template variables=LATLON_IN_TYPE: True;
        template variables=SINGLE_POINT_METHOD: True;
sort-key=0surface6

[template variables=LATITUDE_POINT]
ns=Diagnostics/Fields
description=Latitude of selected point.
help=The latitude must exist within the domain. Value should be a float: for example, -1.5.
type=real
compulsory=true
sort-key=0surface6-b

[template variables=LONGITUDE_POINT]
ns=Diagnostics/Fields
description=Longitude of selected point.
help=The longitude must exist within the domain. Value should be a float: for example, 0.8.
type=real
compulsory=true
sort-key=0surface6-c

[template variables=LATLON_IN_TYPE]
ns=Diagnostics/Fields
description=Method used to map model data onto selected gridpoints.
help=This switch indicates whether the selected latitude longitude coordinates are on the real world grid or
    the rotated grid specified by the input data.
values="realworld", "rotated"
compulsory=true
sort-key=0surface6-a

[template variables=SINGLE_POINT_METHOD]
ns=Diagnostics/Fields
description=Method used to map model data onto selected gridpoints.
help=Method used to map model data onto selected gridpoints. These are regrid methods available in Iris.
values="Nearest", "Linear"
compulsory=true
sort-key=0surface6-d

#######################################################################
# Pressure level fields.
[Diagnostics/Pressure]
ns=Diagnostics/Pressure
sort-key=sec-c2
title=Pressure level fields

[template variables=PRESSURE_LEVEL_FIELDS]
ns=Diagnostics/Pressure
title=Pressure level fields
description=Pressure level diagnosic variables for analysis.
help=Quoted variable names for pressure level variables. The names should follow CF naming
    conventions, and will be translated appropriately. Where applicable, a STASH code in
    the format "m??s??i???" maybe be used instead.
compulsory=true
type=python_list
sort-key=1pressure1

[template variables=PRESSURE_LEVELS]
ns=Diagnostics/Pressure
description=List of pressure levels to generate plots for.
help=A list of integer pressure levels in hPa in python list format. E.g: [850, 1000]
type=python_list
compulsory=true
sort-key=1pressure2

[template variables=SPATIAL_PLEVEL_FIELD]
ns=Diagnostics/Pressure
description=Create spatially mapped plots for the specified pressure level fields.
type=python_boolean
compulsory=true
sort-key=1pressure3

[template variables=SPATIAL_PLEVEL_FIELD_METHOD]
ns=Diagnostics/Pressure
description=Select analysis method(s) for output mapped plots. Add all options required.
            Leave blank or set to "SEQ" (sequence) for plots each diagnostic output time.
            For time-collapsed outputs over each analysis period, set to "MEAN", "MAX", "MIN", "STD" etc.
help=Quoted analysis methods. Settings should be based on available iris.analysis methods for collapsing cube dimensions.
type=python_list
compulsory=true
sort-key=1pressure3a

[template variables=SPATIAL_PLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/Pressure
description=Create case aggregated spatial plots for the specified pressure level fields.
            Select all options required.
       Option1: Aggregate mean by lead time.
       Option2: Aggregate mean by hour of day.
       Option3: Aggregate mean by validity time.
       Option4: All cases aggregated to single mean spatial plot.
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=1pressure3b

[template variables=SPATIAL_DIFFERENCE_PLEVEL_FIELD]
ns=Diagnostics/Pressure
description=Create spatially mapped difference plots for the specified pressure level fields.
            The analysis method(s) set in SPATIAL_PLEVEL_FIELD_METHOD will be used.
type=python_boolean
compulsory=true
sort-key=1pressure4

[template variables=SPATIAL_DIFFERENCE_PLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/Pressure
description=Create case aggregated spatial difference plots for the specified pressure level fields.
            Select all options required.
       Option1: Aggregate mean by lead time.
       Option2: Aggregate mean by hour of day.
       Option3: Aggregate mean by validity time.
       Option4: All cases aggregated to single mean spatial plot
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=1pressure4b

[template variables=TIMESERIES_PLEVEL_FIELD]
ns=Diagnostics/Pressure
description=Create time series plots for the specified pressure level fields.
            Calculated as domain (or sub-area) mean.
type=python_boolean
compulsory=true
sort-key=1pressure5

[template variables=TIMESERIES_PLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/Pressure
description=Create case aggregated time series plots for the specified pressure level fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time (requires overlapping times).
       Option4: All cases aggregated to single timeseries (assumes no overlapping times).
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=1pressure5b

[template variables=HISTOGRAM_PLEVEL_FIELD]
ns=Diagnostics/Pressure
description=Create histogram plots of specified pressure level fields.
            Use HISTOGRAM_PLEVEL_FIELD_SEQUENCE to set plotting mode.
type=python_boolean
compulsory=true
sort-key=1pressure6

[template variables=HISTOGRAM_PLEVEL_FIELD_SEQUENCE]
ns=Diagnostics/Pressure
description=Select analysis method for output pressure level histograms.
            Set to True for histogram at each model output time.
            Set to False for single histogram of all times in output.
type=python_boolean
compulsory=true
sort-key=1pressure6a

[template variables=HISTOGRAM_PLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/Pressure
description=Create case aggregated histogram plots for specified pressure levels.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time.
       Option4: All cases aggregated to single histogram.
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=1pressure6b

[template variables=PROFILE_PLEVEL]
ns=Diagnostics/Pressure
description=Domain averaged vertical profile on pressure levels.
            The analysis method(s) set in SPATIAL_PLEVEL_FIELD_METHOD will be used.
type=python_boolean
compulsory=true
sort-key=1pressure7

[template variables=PROFILE_PLEVEL_AGGREGATION]
ns=Diagnostics/Pressure
description=Aggregate domain averaged vertical profile on pressure levels for each time.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time.
       Option4: All cases aggregated to single profile.
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=1pressure7b

[template variables=EXTRACT_PLEVEL_TRANSECT]
ns=Diagnostics/Pressure
description=Plot a cross section of pressure for variables.
help=This functionality extracts data for each variable and extracts a column
     along each point of the transect. The number of points along the transect
     is determined by calculating the length of the transect in degrees, and
     dividing this by the minimum grid spacing within the domain. Additional
     dimensions (time, ensemble) are accepted and returned as a cross section.
     This allows the user to compute slices through features of meteorological
     interest, such as transects through valleys, or through a front as it
     passes through.
type=python_boolean
trigger=template variables=PLEVEL_TRANSECT_STARTCOORDS: True;
        template variables=PLEVEL_TRANSECT_FINISHCOORDS: True;
compulsory=true
sort-key=1pressure8

[template variables=PLEVEL_TRANSECT_STARTCOORDS]
ns=Diagnostics/Pressure
description=Start latitude, longitude of the cross section.
help=The latitude, longitude coordinate in the model coordinate system where the
     cross section will start i.e. the furthest left hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level.
type=real,real
compulsory=true
sort-key=1pressure8a

[template variables=PLEVEL_TRANSECT_FINISHCOORDS]
ns=Diagnostics/Pressure
description=Finish latitude, longitude of the cross section.
help=The latitude, longitude coordinate in the model coordinate system where the
     cross section will finish i.e. the furthest right hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level.
type=real,real
compulsory=true
sort-key=1pressure8b


########################################################################
# Model-level fields.
[Diagnostics/ModelLevel]
ns=Diagnostics/ModelLevel
sort-key=sec-c3
title=Model level fields

[template variables=MODEL_LEVEL_FIELDS]
ns=Diagnostics/ModelLevel
title=Model level fields
description=Model level diagnostic variables for analysis.
help=Quoted variable names for model level variables. The names should follow CF naming
    conventions, and will be translated appropriately. Where applicable, a STASH code in
    the format "m??s??i???" maybe be used instead.
compulsory=true
type=python_list
sort-key=2modellevel1

[template variables=MODEL_LEVELS]
ns=Diagnostics/ModelLevel
description=List of model levels to generate plots for.
help=Include an integer list of model levels in python list format, e.g: [1, 2, 3, 4]
type=python_list
compulsory=true
sort-key=2modellevel2

[template variables=SPATIAL_MLEVEL_FIELD]
ns=Diagnostics/ModelLevel
description=Create spatially mapped plots for the specified model level fields.
type=python_boolean
compulsory=true
sort-key=2modellevel3

[template variables=SPATIAL_MLEVEL_FIELD_METHOD]
ns=Diagnostics/ModelLevel
description=Select analysis method(s) for output mapped plots. Add all options required.
            Leave blank or set to "SEQ" (sequence) for plots each diagnostic output time.
            For time-collapsed outputs over each analysis period, set to "MEAN", "MAX", "MIN", "STD" etc.
help=Quoted analysis methods. Settings should be based on available iris.analysis methods for collapsing cube dimensions.
type=python_list
compulsory=true
sort-key=2modellevel3a

[template variables=SPATIAL_MLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/ModelLevel
description=Create case aggregated spatial plots for specified model level fields.
            Select all options required.
       Option1: Aggregate mean by lead time.
       Option2: Aggregate mean by hour of day.
       Option3: Aggregate mean by validity time.
       Option4: All cases aggregated to single mean spatial plot.
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=2modellevel3b

[template variables=SPATIAL_DIFFERENCE_MLEVEL_FIELD]
ns=Diagnostics/ModelLevel
description=Create spatially mapped difference plots for the specified model level fields.
            The analysis method(s) set in SPATIAL_MLEVEL_FIELD_METHOD will be used.
type=python_boolean
compulsory=true
sort-key=2modellevel4

[template variables=SPATIAL_DIFFERENCE_MLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/ModelLevel
description=Create case aggregated spatial difference plots for the specified model level fields.
            Select all options required.
       Option1: Aggregate mean by lead time.
       Option2: Aggregate mean by hour of day.
       Option3: Aggregate mean by validity time.
       Option4: All cases aggregated to single mean spatial plot.
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=2modellevel4b

[template variables=TIMESERIES_MLEVEL_FIELD]
ns=Diagnostics/ModelLevel
description=Create time series plots for the specified model level fields.
            Calculated as domain (or sub-area) mean.
type=python_boolean
compulsory=true
sort-key=2modellevel5

[template variables=TIMESERIES_MLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/ModelLevel
description=Create case aggregated time series plots for the specified model level fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time (requires overlapping times).
       Option4: All cases aggregated to single timeseries (assumes no overlapping times).
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=2modellevel5b

[template variables=HISTOGRAM_MLEVEL_FIELD]
ns=Diagnostics/ModelLevel
description=Create histogram plots of specified model level fields.
            Use HISTOGRAM_MLEVEL_FIELD_SEQUENCE to set plotting mode.
type=python_boolean
compulsory=true
sort-key=2modellevel6

[template variables=HISTOGRAM_MLEVEL_FIELD_SEQUENCE]
ns=Diagnostics/ModelLevel
description=Select analysis method for output model level histograms.
            Set to True for histogram at each model output time.
            Set to False for single histogram for all times in output.
type=python_boolean
compulsory=true
sort-key=2modellevel6a

[template variables=HISTOGRAM_MLEVEL_FIELD_AGGREGATION]
ns=Diagnostics/ModelLevel
description=Create case aggregated histogram plots for specified model level fields.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time
       Option4: All cases aggregated to single histogram
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=2modellevel6b

[template variables=PROFILE_MLEVEL]
ns=Diagnostics/ModelLevel
description=Domain averaged vertical profile on model levels.
            The analysis method(s) set in SPATIAL_SURFACE_FIELD_METHOD will be used.
type=python_boolean
compulsory=true
sort-key=2modellevel7

[template variables=PROFILE_MLEVEL_AGGREGATION]
ns=Diagnostics/ModelLevel
description=Aggregate domain averaged vertical profile on model levels for each time.
            Select all options required.
       Option1: Aggregate by lead time.
       Option2: Aggregate by hour of day.
       Option3: Aggregate by validity time.
       Option4: All cases aggregated to single profile.
type=python_boolean,python_boolean,python_boolean,python_boolean
compulsory=true
sort-key=2modellevel7b

[template variables=EXTRACT_MLEVEL_TRANSECT]
ns=Diagnostics/ModelLevel
description=Plot a cross section of model_level_number for variables.
help=This functionality extracts data for each variable and extracts a column
     along each point of the transect. The number of points along the transect
     is determined by calculating the length of the transect in degrees, and
     dividing this by the minimum grid spacing within the domain. Additional
     dimensions (time, ensemble) are accepted and returned as a cross section.
     This allows the user to compute slices through features of meteorological
     interest, such as transects through valleys, or through a front as it
     passes through.
type=python_boolean
trigger=template variables=MLEVEL_TRANSECT_STARTCOORDS: True;
        template variables=MLEVEL_TRANSECT_FINISHCOORDS: True;
compulsory=true
sort-key=2modellevel8

[template variables=MLEVEL_TRANSECT_STARTCOORDS]
ns=Diagnostics/ModelLevel
description=Start latitude, longitude of the cross section.
help=The latitude, longitude coordinate in the model coordinate system where the
     cross section will start i.e. the furthest left hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level).
type=real,real
compulsory=true
sort-key=2modellevel8b

[template variables=MLEVEL_TRANSECT_FINISHCOORDS]
ns=Diagnostics/ModelLevel
description=Finish latitude, longitude of the cross section.
help=The latitude, longitude coordinate in the model coordinate system where the
     cross section will finish i.e. the furthest right hand point of the plot,
     where the x axis is distance along transect, and y axis is pressure level.
type=real,real
compulsory=true
sort-key=2modellevel8c

#######################################################
# Verification
[Diagnostics/Verification]
ns=Diagnostics/Verification
sort-key=sec-c6
title=Verification

[template variables=METPLUS_POINT_STAT]
ns=Diagnostics/Verification
description=Run METplus point stat in the workflow.
help=If True, it will enable the production of verification statistics against
    point observations (i.e. land-synop, sonde,...).
type=python_boolean
trigger=template variables=METPLUS_OPT_CONFIG_KEYS: True;
        template variables=METPLUS_OBS_DIR: True;
compulsory=true
sort-key=met1

[template variables=METPLUS_GRID_STAT]
ns=Diagnostics/Verification
description=Run METplus grid stat in the workflow.
help=If True, it will enable the production of verification statistics against
    gridded data (i.e. radar, analysis,...).
type=python_boolean
trigger=template variables=METPLUS_OPT_CONFIG_KEYS: True;
        template variables=METPLUS_ANA_DIR: True;
compulsory=true
sort-key=met2

[template variables=METPLUS_OPT_CONFIG_KEYS]
ns=Diagnostics/Verification
description=Which METplus configuration to run.
help=Selects the site/model specific configuration to use. The configuration must
    exist as restricted files in
    https://github.com/MetOffice/CSET-restricted-files/tree/main/app/{app_name}/file
type=quoted
value-hints="metoffice", "niwa"
sort-key=met3

[template variables=METPLUS_OBS_DIR]
ns=Diagnostics/Verification
description=Path to directory containing observations in MET ASCII format.
type=quoted
sort-key=met4

[template variables=METPLUS_ANA_DIR]
ns=Diagnostics/Verification
description=Path to directory containing analysis in MET netcdf format.
type=quoted
sort-key=met5

##############################################################
# QQ plots
[Diagnostics/QQ]
ns=Diagnostics/QQ
sort-key=sec-c5
title=Quantile-Quantile

[template variables=BASIC_QQ_PLOT]
ns=Diagnostics/QQ
description=Create a basic quantile-quantile plot for variables specified collapsing over specified coordinates.
            Produces a single Q-Q plot and so requires collapsing across all coordinates in the file.
help=The quantiles defined for each variable are 0, 0.001, 0.01,
     0.1,1,5,10,15,20,25,30,40,50,60,70,75,80,85,90,95,99,99.9,99.99,
     99.999,100.
     If more than one variable is supplied e.g. MODEL_FIELDS_A='a','b',...;
     MODEL_FIELDS_B='c','d',...; the Q-Q plot will compare 'a' vs. 'c',
     'b' vs. 'd', etc.
     It is expected that the length of MODEL_FIELDS_A is the same as
     MODEL_FIELDS_B.
trigger=template variables=MODEL_FIELDS_A: True;
        template variables=VERTICAL_COORDINATE_A: True;
        template variables=LEVELS_A: True;
        template variables=MODEL_FIELDS_B: True;
        template variables=VERTICAL_COORDINATE_B: True;
        template variables=LEVELS_B: True;
        template variables=COORDINATE_LIST: True;
        template variables=ONE_TO_ONE: True;
type=python_boolean
compulsory=true
sort-key=qq1

[template variables=MODEL_FIELDS_A]
ns=Diagnostics/QQ
description=List of standard names for model fields to plot on y axis.
            Must be the same length as MODEL_FIELDS_B.
help=Include a list of variable names in python list format["var1","var2"].
type=python_list
compulsory=true
sort-key=qq1a

[template variables=VERTICAL_COORDINATE_A]
ns=Diagnostics/QQ
description=Level coordinate name about which to constrain. The length of this
            list should be the same as MODEL_FIELDS A.
help=Include a list of coordinate names in python list format["var1","var2"].
     If single levels are required use any vertical coordinate in the cube and
     make sure to put LEVELS_A as [].
type=python_list
compulsory=true
sort-key=qq1b

[template variables=LEVELS_A]
ns=Diagnostics/QQ
description=A list of levels to constrain over. The length of this
            list should be the same as MODEL_FIELDS A.
help=Use "*" for all levels, INTEGERS for specific levels, and [] for no levels
     (e.g., single level fields).
type=python_list
compulsory=true
sort-key=qq1c

[template variables=MODEL_FIELDS_B]
ns=Diagnostics/QQ
description=List of standard names for model fields to plot on x axis.
            Must be the same length as MODEL_FIELDS_A.
help=Include a list of variable names in python list format["var1","var2"].
type=python_list
compulsory=true
sort-key=qq1d

[template variables=VERTICAL_COORDINATE_B]
ns=Diagnostics/QQ
description=Level coordinate name about which to constrain. The length of this
            list should be the same as MODEL_FIELDS B.
help=Include a list of coordinate names in python list format["var1","var2"]. If
    single levels are required use any vertical coordinate in the cube and make
    sure to put LEVELS_B as [].
type=python_list
compulsory=true
sort-key=qq1e

[template variables=LEVELS_B]
ns=Diagnostics/QQ
description=A list of levels to constrain over. The length of this
            list should be the same as MODEL_FIELDS B.
help=Use "*" for all levels, INTEGERS for specific levels, and [] for no levels
    (e.g., single level fields).
type=python_list
compulsory=true
sort-key=qq1f

[template variables=COORDINATE_LIST]
ns=Diagnostics/QQ
description=List of coordinates to collapse the percentiles over. The coordinate
    list must be of the form [\\"var1\\",\\"var2\\",...]. The values should be
    all of the coordinates in the cube to ensure the output is 1D with the
    percentiles as the coordinate.
help=Include a list of coordinates in python list format[\\"var1\\",\\"var2\\"].
type=quoted
compulsory=true
sort-key=qq1g

[template variables=ONE_TO_ONE]
ns=Diagnostics/QQ
description=One-to-one line option for plots.
help=Set to True if you want a one-to-one line; false if not.
type=python_boolean
compulsory=true
sort-key=qq1h


######################################################
# Derived diagnostics
[Diagnostics/Derived]
ns=Diagnostics/Derived
sort-key=sec-c4
title=Derived diagnostics


###################################
# Age of air
[Diagnostics/AOA]
ns=Diagnostics/Derived/AOA
sort-key=sec-c5
title=Age of air

[template variables=AOA_DIAG]
ns=Diagnostics/Derived/AOA
title=Run age of air diagnostic on specified pressure levels.
description=PROCESS-BASED DIAGNOSTIC.
            Run the age of air diagnostic on model data.
help=The age of air diagnostic provides a qualtitative view of how old air is within
     the domain, by calculating a back trajectory at each grid point at each lead time
     to determine when air entered through the lateral boundary. This is useful for
     diagnosing how quickly air ventilates the domain, depending on its size and the
     prevailing meteorology.
     The diagnostic uses the u, v and w components of wind, along with geopotential height to
     perform the back trajectory. Data is first regridded to 0.5 degrees.
     Note: the code here does not consider sub-grid transport, and only uses the postprocessed
     velocity fields and geopotential height. Its applicability is for large-scale flow O(1000 km),
     and not small scale flow where mixing is likely to play a larger role.
type=python_boolean
compulsory=true
trigger=template variables=AOA_PLEV: True;
        template variables=AOA_CYCLIC: True;
sort-key=aoa1

[template variables=AOA_PLEV]
ns=Diagnostics/Derived/AOA
title=AOA: Pressure Levels
description=List of pressure levels to calculate the age of air diagnostic.
help=The pressure levels must be specified in hPa, where the variables (U,V,W,Z)
     exist on the pressure level.
type=python_list
compulsory=true
sort-key=aoa2

[template variables=AOA_CYCLIC]
ns=Diagnostics/Derived/AOA
title=AOA: Use Cyclic Option
description=If True, LAM is considered cyclic in the east/west direction.
help=This option when True, will allow back trajectories to advect through the east/
     west boundary and continue through the other side of the domain. This is useful
     for large domains such as the cyclic tropical channel, where there is no east/
     west boundary.
type=python_boolean
compulsory=true
sort-key=aoa3


###################################
# Daily Weather
[Diagnostics/Daily]
ns=Diagnostics/Derived/Daily
sort-key=sec-c6
title=Daily weather
[template variables=AVIATION_FOG_PRESENCE_SPATIAL_PLOT]
ns=Diagnostics/Derived/Daily
title=Aviation Fog presence: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether aviation fog is located at a point.
            Aviation fog is defined as visibility < 1 km.
            Requires visibility_in_air.
help=This diagnostic identifies only whether aviaton fog is present or not, regardless
     of the amount of aviation fog.
      It can be particularly useful for considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=dw9

[template variables=AVIATION_FOG_PRESENCE_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Daily
title=Aviation fog presence: domain mean timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether aviation fog is located at a point and creates a
            timeseries representing the chance of aviation fog anywhere in the domain.
            Aviation fog is defined as when the visibility drops below 1 km.
            Requires visibility_in_air.
help=This diagnostic identifies only whether aviation fog is present or not, regardless
     of the amount of aviation fog.
     It can be particularly useful for considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=dw10

[template variables=AVIATION_FOG_PRESENCE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Daily
title=Aviation fog presence: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines the difference between two aviation fog presence fields.
            Aviation fog is defined as when the visibility drops below 1 km.
            Requires visibility_in_air.
help=This diagnostic identifies only whether aviation fog is present or not, regardless
     of the amount of aviation fog.
     It can be particularly useful for considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=dw11

[template variables=RAIN_PRESENCE_SPATIAL_PLOT]
ns=Diagnostics/Derived/Daily
title=Rain presence: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether rain is located at a point. Requires
            surface_microphysical_rainfall_rate.
help=This diagnostic identifies only whether it is raining or not, regardless
     of the amount of rain that is falling. It can be particularly useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=dw1

[template variables=RAIN_PRESENCE_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Daily
title=Rain presence: domain mean timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether rain is located at a point and creates a
            timeseries representing the chance of rain anywhere in the domain.
            Requires surface_microphysical_rainfall_rate.
help=This diagnostic identifies only whether it is raining or not, regardless
     of the amount of rain that is falling. It can be particularly useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=dw2

[template variables=RAIN_PRESENCE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Daily
title=Rain presence: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines the difference between two rain presence fields.
            Requires surface_microphysical_rainfall_rate.
help=This diagnostic identifies only whether it is raining or not, regardless
     of the amount of rain that is falling. It can be particularly useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=dw3

[template variables=SFC_WIND_BEAUFORT_SCALE_SPATIAL]
ns=Diagnostics/Derived/Daily
title=Sfc wind Beaufort Scale: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines the surface wind speed on the Beaufort scale as a spatial
            plot. Requires wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=dw4

[template variables=SFC_WIND_BEAUFORT_SCALE_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Daily
title=Sfc wind Beaufort Scale: domain mean timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines the surface wind speed on the Beaufort scale and creates
            a domain mean timeseries of it. Requires wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=dw5

[template variables=SFC_WIND_BEAUFORT_SCALE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Daily
title=Sfc wind Beaufort Scale: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines the surface wind speed on the Beaufort scale for multiple
            models and creates a spatial difference plot. Requires
            wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=dw6


[template variables=DAILY_09_MAXIMUM_TEMPERATURE_SPATIAL_PLOT]
ns=Diagnostics/Derived/Daily
title=Daily maximum temperature: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines the daily maximum temperature defined between 0900 UTC
            and 0900 UTC the following day. Requires temperature_at_screen_level
            with cell_method of maximum.
help=This diangostic identifies the daily maximum temperature at each grid point.
type=python_boolean
compulsory=true
sort-key=dw7

[template variables=DAILY_09_MAXIMUM_TEMPERATURE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Daily
title=Daily maximum temperature: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines the daily maximum temperature defined between 0900 UTC
            and 0900 UTC the following day and takes the difference between
            two models. Requires temperature_at_screen_level with cell_method
            of maximum.
help=This diangostic identifies the daily maximum temperature at each grid point.
type=python_boolean
compulsory=true
sort-key=dw8

[template variables=DAILY_09_MINIMUM_TEMPERATURE_SPATIAL_PLOT]
ns=Diagnostics/Derived/Daily
title=Daily minimum temperature: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines the daily minimum temperature defined between 0900 UTC
            and 0900 UTC the following day. Require temperature_at_screen_level
            with cell_method of minimum.
help=This diagnostic identifies the daily minimum temperature at each grid point.
type=python_boolean
compulsory=true
sort-key=dw12

[template variables=DAILY_09_MINIMUM_TEMPERATURE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Daily
title=Daily minimum temperature: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines the daily minimum temperature defined between 0900 UTC
            and 0900 UTC the following day and takes the difference between
            two models. Requires temperature_at_screen_level with cell_method
            of minimum.
help=This diangostic identifies the daily minimum temperature at each grid point.
type=python_boolean
compulsory=true
sort-key=dw13

[template variables=FOG_PRESENCE_SPATIAL_PLOT]
ns=Diagnostics/Derived/Daily
title=Fog presence: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether fog is located at a point.
            Here, fog is defined as visibility < 250 m.
            Requires visibility_in_air.
help=This diagnostic identifies only whether fog is present or not, regardless
     of the amount of fog.
      It can be particularly useful for considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=dw14

[template variables=FOG_PRESENCE_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Daily
title=Fog presence: domain mean timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether fog is located at a point and creates a
            timeseries representing the chance of aviation fog anywhere in the domain.
            Here, fog is defined as when the visibility drops below 250 m.
            Requires visibility_in_air.
help=This diagnostic identifies only whether fog is present or not, regardless
     of the amount of fog.
     It can be particularly useful for considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=dw15

[template variables=FOG_PRESENCE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Daily
title=Fog presence: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines the difference between two fog presence fields.
            Here, fog is defined as when the visibility drops below 250 m.
            Requires visibility_in_air.
help=This diagnostic identifies only whether fog is present or not, regardless
     of the amount of fog.
     It can be particularly useful for considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=dw16

###################################
# Aviation
[Diagnostics/Aviation]
ns=Diagnostics/Derived/Aviation
sort-key=sec-c6a
title=Aviation


[template variables=CLOUD_BASE_HEIGHT_LESS_THAN_50_M_SPATIAL_PLOT]
ns=Diagnostics/Derived/Aviation
title=Cloud base height less than 50m: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether the cloud base height is less than 50 m at a point. Requires
            cloud_base_altitude.
help=This diagnostic identifies only whether the cloud base height is less than 50 m or not,
     regardless of the amount of cloud that is present. It can be particularly useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=da1

[template variables=CLOUD_BASE_HEIGHT_LESS_THAN_50_M_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Aviation
title=Cloud base height less than 50m: domain timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether the cloud base height is less than 50 m at a point. Requires
            cloud_base_altitude.
help=This diagnostic identifies only whether the cloud base height is less than 50 m or not,
     regardless of the amount of cloud that is present. It can be particularly useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=da1a

[template variables=CLOUD_BASE_HEIGHT_LESS_THAN_50_M_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Aviation
title=Cloud base height less than 50m: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether the cloud base height is less than 50 m at a point. Requires
            cloud_base_altitude.
help=This diagnostic identifies only whether the cloud base height is less than 50 m or not,
     regardless of the amount of cloud that is present. It can be particularly useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=da1b

###################################
# Winter Weather
[Diagnostics/Winter]
ns=Diagnostics/Derived/Winter
sort-key=sec-c7
title=Winter weather

[template variables=AIR_FROST_PRESENCE_DOMAIN_TIMESERIES]
ns=Diagnostics/Derived/Winter
title=Air frost presence: domain timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether air frost is located at a point and creates a
            time series representing the chance of frost anywhere in the domain.
            Requires temperature_at_screen_level.
help=This diagnostic identifies only whether there is air frost, regardless
     of the difference below 0degC. It can be useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww0

[template variables=THICK_FOG_PRESENCE_SPATIAL_PLOT]
ns=Diagnostics/Derived/Winter
title=Thick fog presence: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
          Determines whether thick fog (visibility <= 100 m) is located at a point.
          Requires visibility_in_air.
help=This diagnostic identifies only whether thick fog is present or not, regardless
   of the visibility value. It can be particularly useful for
   considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww1

[template variables=THICK_FOG_PRESENCE_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Winter
title=Thick fog presence: domain mean timeseries
description=IMPACT-BASED DIAGNOSTIC.
          Determines whether thick fog is located at a point and creates a
          timeseries representing the chance of thick fog (visibility < = 100 m) anywhere in the domain.
          Requires visibility_in_air.
help=This diagnostic identifies only whether thick fog is present or not, regardless
   of the visibility value. It can be particularly useful for
   considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww2

[template variables=THICK_FOG_PRESENCE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Winter
title=Thick fog presence: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
               Determines the difference between two thick fog presence fields.
               Thick fog is defined as visibility <= 100 m.
               Requires visibility_in_air.
help=This diagnostic identifies only whether thick fog is present or not, regardless
     of the visibility value. It can be particularly useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww3

[template variables=SNOW_PRESENCE_SPATIAL_PLOT]
ns=Diagnostics/Derived/Winter
title=Snow presence: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether snow is located at a point. Requires
            surface_microphysical_snowfall_rate.
help=This diagnostic identifies only whether it is snowing or not, regardless
     of the amount of snow that is falling. It can be particularly useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww1

[template variables=AIR_FROST_PRESENCE_SPATIAL_PLOT]
ns=Diagnostics/Derived/Winter
title=Air frost presence: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether air frost is located at a point and creates a
            domain plot representing the chance of frost anywhere in the domain.
            Requires temperature_at_screen_level.
help=This diagnostic identifies only whether there is air frost, regardless
     of the difference below 0degC. It can be useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww0a

[template variables=SNOW_PRESENCE_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Winter
title=Snow presence: domain mean timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether snow is located at a point and creates a
            timeseries representing the chance of snow anywhere in the domain.
            Requires surface_microphysical_snowfall_rate.
help=This diagnostic identifies only whether it is snowing or not, regardless
     of the amount of snowing that is falling. It can be particularly useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww2

[template variables=AIR_FROST_PRESENCE_SPATIAL_DIFFERENCE_PLOT]
ns=Diagnostics/Derived/Winter
title=Air frost presence: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether air frost is located at a point and creates a
            domain plot representing the difference between the chance of frost
            anywhere in the domain between two models.
            Requires temperature_at_screen_level.
help=This diagnostic identifies only whether there is air frost in each model,
     regardless of the difference below 0degC. It can be useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww0b

[template variables=SNOW_PRESENCE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Winter
title=Snow presence: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines the difference between two snow presence fields.
            Requires surface_microphysical_snowfall_rate.
help=This diagnostic identifies only whether it is snowing or not, regardless
     of the amount of snow that is falling. It can be particularly useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww3

[template variables=GROUND_FROST_PRESENCE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Winter
title=Ground frost presence: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether ground frost is located at a point and creates a
            domain plot representing the difference between the chance of frost
            anywhere in the domain between two models.
            Requires grid_surface_temperature.
help=This diagnostic identifies only whether there is ground frost in each model,
     regardless of the magnitude below 0degC. It is useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww3a

[template variables=GROUND_FROST_PRESENCE_SPATIAL_PLOT]
ns=Diagnostics/Derived/Winter
title=Ground frost presence: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether ground frost is located at a point and creates a
            domain plot representing the chance of frost anywhere in the domain.
            Requires gird_surface_temperature.
help=This diagnostic identifies only whether there is ground frost, regardless
     of the magnitude below 0degC. It is useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww3b

[template variables=GROUND_FROST_PRESENCE_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Winter
title=Ground frost presence: domain timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether ground frost is located at a point and creates a
            time series representing the chance of frost anywhere in the domain.
            Requires grid_surface_temperature.
help=This diagnostic identifies only whether there is ground frost, regardless
     of the magnitude below 0degC. It is useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=ww3c

###################################
# Cyclones
[Diagnostics/Cyclones]
ns=Diagnostics/Derived/Cyclones
sort-key=sec-c8
title=Cyclones

[template variables=SFC_GALE_FORCE_WINDS_PRESENCE_SPATIAL]
ns=Diagnostics/Derived/Cyclones
title=Sfc gale force winds presence: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines the presence of gale force winds or above as a spatial
            plot. Requires wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=cy1

[template variables=SFC_GALE_FORCE_WINDS_PRESENCE_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Cyclones
title=Sfc gale force winds presence: domain mean timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines the presence of gale force winds or above and creates
            a domain mean timeseries of it. Requires wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=cy2

[template variables=SFC_GALE_FORCE_WINDS_PRESENCE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Cyclones
title=Sfc gale force winds presence: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines the presence of gale force winds or above for multiple
            models and creates a spatial difference plot. Requires
            wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=cy3

[template variables=SFC_STORM_FORCE_WINDS_PRESENCE_SPATIAL]
ns=Diagnostics/Derived/Cyclones
title=Sfc storm force winds presence: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines the presence of storm force winds or above as a spatial
            plot. Requires wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=cy4

[template variables=SFC_STORM_FORCE_WINDS_PRESENCE_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Cyclones
title=Sfc storm force winds presence: domain mean timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines the presence of storm force winds or above and creates
            a domain mean timeseries of it. Requires wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=cy5

[template variables=SFC_STORM_FORCE_WINDS_PRESENCE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Cyclones
title=Sfc storm force winds presence: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines the presence of storm force winds or above for multiple
            models and creates a spatial difference plot. Requires
            wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=cy6

[template variables=SFC_HURRICANE_FORCE_WINDS_PRESENCE_SPATIAL]
ns=Diagnostics/Derived/Cyclones
title=Sfc hurricane force winds presence: spatial plot
description=IMPACT-BASED DIAGNOSTIC.
            Determines the presence of hurricane force winds or above as a spatial
            plot. Requires wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=cy7

[template variables=SFC_HURRICANE_FORCE_WINDS_PRESENCE_DOMAIN_MEAN_TIMESERIES]
ns=Diagnostics/Derived/Cyclones
title=Sfc hurricane force winds presence: domain mean timeseries
description=IMPACT-BASED DIAGNOSTIC.
            Determines the presence of hurricane force winds or above and creates
            a domain mean timeseries of it. Requires wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=cy8

[template variables=SFC_HURRICANE_FORCE_WINDS_PRESENCE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/Cyclones
title=Sfc hurricane force winds presence: spatial difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines the presence of hurricane force winds or above for multiple
            models and creates a spatial difference plot. Requires
            wind_speed_at_10m.
help=This diagnostic converts the wind speed from m/s to the Beaufort scale. This
     translates the windspeed into a human-readable descriptor (such as gale) to
     improve interpretation of whether the weather story is changing.
type=python_boolean
compulsory=true
sort-key=cy9

###################################
# Extra-tropical cyclones
[Diagnostics/ETCs]
ns=Diagnostics/Derived/Cyclones/ETCs
sort-key=sec-c8a
title=Extra-tropical cyclones


###################################
# Tropical Cyclones
[Diagnostics/TCs]
ns=Diagnostics/Derived/Cyclones/TCs
sort-key=sec-c8b
title=Tropical cyclones

###################################
# Precipitation
[Diagnostics/PPN]
ns=Diagnostics/Derived/PPN
sort-key=sec-c9
title=Precipitation

###################################
# Convection diagnostics.
[Diagnostics/Convection]
ns=Diagnostics/Derived/PPN/Convection
sort-key=sec-c9a
title=Convection

[template variables=DETERMINISTIC_PLOT_CAPE_RATIO]
ns=Diagnostics/Derived/PPN/Convection
description=PROCESS-BASED DIAGNOSTIC.
            Extracts data required for, and calculates the CAPE ratio diagnostic, plotting on a map.
            Required STASH m01s20i114, m01s20i112, m01s20i113.
help=See includes/deterministic_plot_cape_ratio.cylc
type=python_boolean
compulsory=true

[template variables=DETERMINISTIC_PLOT_INFLOW_PROPERTIES]
ns=Diagnostics/Derived/PPN/Convection
description=PROCESS-BASED DIAGNOSTIC.
            Extracts data required for, and calculates the inflow properties diagnostic, plotting on a map.
            Required STASH m01s20i119, m01s00i025, m01s00i033.
help=See includes/deterministic_plot_inflow_properties.cylc
type=python_boolean
compulsory=true

[template variables=LIGHTNING_PRESENCE_SPATIAL_PLOT]
ns=Diagnostics/Derived/PPN/Convection
title=Lightning presence: domain spatial
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether lightning is present at all points and creates a
            domain plot representing the presence anywhere in the domain.
            Requires "number_of_lightning_flashes_in_column"
help=This diagnostic identifies only whether there is lightning, regardless
     of the flash rate. It can be useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=cv1

[template variables=LIGHTNING_PRESENCE_SPATIAL_DIFFERENCE_PLOT]
ns=Diagnostics/Derived/PPN/Convection
title=Lightning presence: domain spatial model difference
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether lightning is present at all points and creates a
            domain plot representing the difference in the presence
            anywhere in the domain between two models.
            Requires "number_of_lightning_flashes_in_column"
help=This diagnostic identifies only whether there is lightning in each model,
     regardless of the flash rate. It can be useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=cv2

[template variables=LIGHTNING_PRESENCE_DOMAIN_TIME_SERIES]
ns=Diagnostics/Derived/PPN/Convection
title=Lightning presence: domain time series
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether lightning is present at all points and creates a
            domain time series of chance of lightning occurrence.
            Requires "number_of_lightning_flashes_in_column"
help=This diagnostic identifies only whether there is lightning,
     regardless of the flash rate. It can be useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=cv3

[template variables=DAILY_LIGHTNING_PRESENCE_SPATIAL_PLOT]
ns=Diagnostics/Derived/PPN/Convection
title=Lightning presence within 24-h based on 09 UTC reference time
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether lightning is present within the domain for a
            rolling 24-h window.
            Requires "number_of_lightning_flashes_in_column"
help=This diagnostic identifies only whether there is lightning,
     regardless of the flash rate. It can be useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=cv4

[template variables=DAILY_LIGHTNING_PRESENCE_SPATIAL_DIFFERENCE]
ns=Diagnostics/Derived/PPN/Convection
title=Lightning presence within 24-h: model difference based on 09 UTC reference time
description=IMPACT-BASED DIAGNOSTIC.
            Determines whether lightning is present within the domain for a
            rolling 24-h window for each model and works out the difference.
            Requires "number_of_lightning_flashes_in_column"
help=This diagnostic identifies only whether there is lightning,
     regardless of the flash rate. It can be useful for
     considering the model from the viewpoint of a customer.
type=python_boolean
compulsory=true
sort-key=cv5

###################################
# Extreme Precipitation
[Diagnostics/XPPN]
ns=Diagnostics/Derived/PPN/XPPN
sort-key=sec-c9b
title=Extreme precipitation


###################################
# Ensembles
[Diagnostics/Ensembles]
ns=Diagnostics/Ensembles
sort-key=sec-c11
title=Ensembles

###################################
# Probabilities
[Diagnostics/Probabilities]
ns=Diagnostics/Ensembles/Probabilities
sort-key=sec-c12
title=Probabilities

[template variables=SCREEN_LEVEL_TEMPERATURE_PROBABILITIES]
ns=Diagnostics/Ensembles/Probabilities
description=IMPACT-BASED DIAGNOSTIC but can be used as a PROCESS-BASED DIAGNOSTIC.
            Calculates probabilities for chosen conditions and thresholds for
            the screen-level temperature.
help=Triggers options for screen level temperature probabilities.
type=python_boolean
trigger=template variables=PROB_TEMPERATURE_CONDITION: True;
        template variables=PROB_TEMPERATURE_THRESHOLD: True;
        template variables=SCREEN_LEVEL_TEMPERATURE_SPATIAL_PROBABILITY_WITHOUT_CONTROL_MEMBER: True;
compulsory=true
sort-key=tpb1

[template variables=PROB_TEMPERATURE_CONDITION]
ns=Diagnostics/Ensembles/Probabilities
description=The condition that the temperature probability will apply.
help= Accepted values are "eq", "ne", "gt", "ge", "lt", "le". Multiple conditions are allowed and
      will be looped over. The conditions do not need to match the number of thresholds.
type=python_list
compulsory=true
sort-key=tpb2

[template variables=PROB_TEMPERATURE_THRESHOLD]
ns=Diagnostics/Ensembles/Probabilities
description= The threshold(s) that the temperature probability uses.
help= A list of values
type=python_list
compulsory=true
sort-key=tpb3

[template variables=SCREEN_LEVEL_TEMPERATURE_SPATIAL_PROBABILITY_WITHOUT_CONTROL_MEMBER]
ns=Diagnostics/Ensembles/Probabilities
description=Plot a spatial probability field for a given condition and threhsold.
help= Include condition and threshold required, it will loop over all conditions for all thresholds.
      Therefore, the thresholds and conditions do not need to be the same length.
type=python_boolean
compulsory=true
sort-key=tpb4
