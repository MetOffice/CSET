#!jinja2
[meta]
title = CSET
description = Workflow for running CSET.
URL = https://metoffice.github.io/CSET

# Import all of our Jinja utilities for use in the workflow.
{% from "jinja_utils" import b64json, get_models %}
# Load a list a model detail dictionaries.
{% set models = get_models(ROSE_SUITE_VARIABLES) %}


[scheduling]
# Allow many concurrent cycles to maximise workflow parallelism.
runahead limit = P100
# Initial and final cycle points cover the entire period of interest.
{% if CSET_CYCLING_MODE == "case_study" %}
initial cycle point = {{ CSET_CASE_DATES|min }}
final cycle point = {{ CSET_CASE_DATES|max }}
{% elif CSET_CYCLING_MODE == "trial" %}
initial cycle point = {{CSET_TRIAL_START_DATE}}
final cycle point = {{CSET_TRIAL_END_DATE}}
{% endif %}

    [[special tasks]]
    # cycle_complete depends on its previous instance. We then don't need to
    # know the offset between the cycles.
    sequential = fetch_complete, cycle_complete

    [[graph]]
    # Only runs on the first cycle.
    R1/^ = """
    validate_environment => install_website_skeleton => setup_complete
    validate_environment => assign_model_colours => setup_complete
    """

    {% if CSET_CYCLING_MODE == "case_study" %}
        # Runs for every forecast initiation time to process the data in parallel.
        {% for date in CSET_CASE_DATES %}
            R1/{{date}} = """
            setup_complete[^] => FETCH_DATA:succeed-all => fetch_complete
            fetch_complete & parbake_recipes => bake_recipes => cycle_complete
            """
        {% endfor %}
    {% elif CSET_CYCLING_MODE == "trial" %}
        # Analysis from each forecast.
        {{CSET_TRIAL_CYCLE_PERIOD}} = """
        setup_complete[^] => FETCH_DATA:succeed-all => fetch_complete
        fetch_complete & parbake_recipes => bake_recipes => cycle_complete
        """
    {% endif %}

    # Only runs on the final cycle.
    R1/$ = """
    # Run aggregation recipes.
    fetch_complete & parbake_aggregation_recipes => bake_aggregation_recipes => cycle_complete
    # Finalise website and cleanup.
    cycle_complete => finish_website => send_email
    cycle_complete => housekeeping
    """


[runtime]
    [[root]]
    script = rose task-run -v
    execution time limit = PT15M
    # Retry submit-failed tasks after a minute.
    submission retry delays = PT1M
        [[[environment]]]
        # As these variables are used in the environment script, they must be
        # defined.
        CSET_ENV_USE_MODULES = {{CSET_ENV_USE_MODULES|default(False)}}
        {% if CSET_ENV_USE_MODULES|default(False) %}
            MODULES_LIST = {{MODULES_LIST}}
            MODULES_PURGE = {{MODULES_PURGE}}
        {% endif %}

        CSET_ENV_SEPARATE_MET = {{CSET_ENV_SEPARATE_MET|default(False)}}
        {% if CSET_ENV_SEPARATE_MET|default(False) %}
            CONDA_METPLUS_VENV_LOCATION = {{CONDA_METPLUS_VENV_LOCATION}}
            MET_INSTALL_DIR = {{MET_INSTALL_DIR}}
            MET_BUILD_BASE = {{MET_BUILD_BASE}}
            METPLUS_BASE = {{METPLUS_BASE}}
            MET_LIBRARIES = {{MET_LIBRARIES}}
        {% endif %}

        CONDA_PATH = {{CONDA_PATH}}
        LOGLEVEL = {{LOGLEVEL}}
        PLOT_RESOLUTION = {{PLOT_RESOLUTION|default(100)}}
        {% if SKIP_WRITE|default(False) %}
        SKIP_WRITE = True
        {% endif %}

    [[FETCH_DATA]]
    script = rose task-run -v --app-key=fetch_fcst
    execution time limit = PT1H
        [[[environment]]]
        ANALYSIS_LENGTH = {{ANALYSIS_LENGTH}}

    [[METPLUS]]
        [[[environment]]]
        {% if METPLUS_GRID_STAT|default(False) %}
            METPLUS_ANA_DIR = {{METPLUS_ANA_DIR}}
            METPLUS_FCST_DIR = {{METPLUS_FCST_DIR}}
            METPLUS_OBS_DIR = {{METPLUS_OBS_DIR}}
            ROSE_APP_OPT_CONF_KEYS = {{METPLUS_OPT_CONFIG_KEYS}}
        {% endif %}

    # Noop tasks to ensure a complete/efficient workflow graph.
    [[DUMMY_TASK]]
    script = true
    platform = localhost
    execution time limit = PT1M
    run mode = skip

    [[setup_complete]]
    inherit = DUMMY_TASK

    [[fetch_complete]]
    inherit = DUMMY_TASK

    [[cycle_complete]]
    inherit = DUMMY_TASK

    [[validate_environment]]
    # Checks the environment works and the cset command is available.

    [[install_website_skeleton]]
    # Copies the static files that make up the web interface.
        [[[environment]]]
        WEB_DIR = {{WEB_DIR}}

    [[assign_model_colours]]
    # Copies the style file, inserting per-model colour definitions to ensure
    # consistency between the many runs.
    execution time limit = PT5M
        [[[environment]]]
        COLORBAR_FILE = {{COLORBAR_FILE}}
        MODEL_NAMES = {{ b64json(models|map(attribute="name")|list) }}

    {% for model in models %}
    [[fetch_fcst_m{{model["id"]}}]]
    # Fetch data from disk or a file based archival system.
    inherit = FETCH_DATA
        [[[environment]]]
        MODEL_IDENTIFIER = {{model["id"]}}
        ROSE_APP_COMMAND_KEY = {{model["data_source"]}}
        DATA_PATH = {{model["data_path"]}}
        DATE_TYPE = {{model["date_type"]}}
        DATA_PERIOD = {{model["data_period"]}}
        ANALYSIS_OFFSET = {{model["analysis_offset"]}}
    {% endfor %}

    [[parbake_recipes]]
    # Parbake all the recipes for this cycle.
    script = rose task-run -v --app-key=parbake_recipes
    execution time limit = PT5M
        [[[directives]]]
        --ntasks=1
        --mem=500
        [[[environment]]]
        ENCODED_ROSE_SUITE_VARIABLES = {{b64json(ROSE_SUITE_VARIABLES)}}

    [[parbake_aggregation_recipes]]
    # Parbake all the aggregation recipes.
    script = rose task-run -v --app-key=parbake_recipes
    execution time limit = PT5M
        [[[directives]]]
        --ntasks=1
        --mem=500
        [[[environment]]]
        ENCODED_ROSE_SUITE_VARIABLES = {{b64json(ROSE_SUITE_VARIABLES)}}
        DO_CASE_AGGREGATION = True

    [[bake_recipes]]
    # Bake the parbaked recipes for this cycle.
    script = "$CYLC_WORKFLOW_RUN_DIR/app/bake_recipes/bin/baker.sh"
    execution time limit = PT3H
    execution retry delays = PT1M
        [[[directives]]]
        --ntasks=32
        --mem=64000

    [[bake_aggregation_recipes]]
    # Bake the parbaked aggregation recipes.
    script = "$CYLC_WORKFLOW_RUN_DIR/app/bake_recipes/bin/baker.sh"
    execution time limit = PT3H
    execution retry delays = PT1M
        [[[directives]]]
        --ntasks=8
        --mem=64000
        [[[environment]]]
        DO_CASE_AGGREGATION = True

    [[housekeeping]]
    # Housekeep input data files.
        [[[environment]]]
        HOUSEKEEPING_MODE = {{HOUSEKEEPING_MODE}}

    [[finish_website]]
    # Updates the workflow info in the web interface.

    [[send_email]]
    # Send email to notify that the workflow is complete.
        [[[environment]]]
        WEB_ADDR = {{WEB_ADDR}}
        WEB_DIR = {{WEB_DIR}}

# Site-specific details that add to or override the core workflow definition.
{% include 'site/' ~ SITE ~ '.cylc' %}
