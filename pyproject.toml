[project]
name = "CSET"
version = "0.4.0"
description = "Toolkit for evaluation and investigation of numerical models for weather and climate applications."
authors = [{ name = "Met Office" }, { name = "NIWA" }]
readme = "README.md"
license = { text = "Apache-2.0" }
requires-python = ">=3.9"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Scientific/Engineering :: GIS",
]
dependencies = [
    "numpy",
    "scitools-iris >= 3.6",
    "ruamel.yaml >= 0.17",
    "pygraphviz >= 1.11"
]

[project.urls]
Documentation = "https://metoffice.github.io/CSET"
Source = "https://github.com/MetOffice/CSET"

[project.scripts]
cset = "CSET:main"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib", "--verbose", "--cov", "--cov-append"]
pythonpath = ["src"]
filterwarnings = ['ignore::DeprecationWarning:pytest']

[tool.coverage.run]
branch = true
relative_files = true
source = ["src"]

[tool.coverage.report]
# This should be steadily increased to ~95% as we add more tests.
fail_under = 80.0

[tool.tox]
legacy_tox_ini = '''
[tox]
requires = tox-conda
isolated_build = True
envlist =
    coverage-clean
    py311-linux-tests
    py311-linux-docs

[testenv:py{39,310,311,312}-lock]
allowlist_externals = cp
conda_channels = conda-forge
conda_create_args = --override-channels
conda_deps =
    pip
    conda-lock
description = Create explicit environment specification conda lock files for CSET dependencies.
skip_install = true
setenv =
    LOCKDIR = {toxinidir}{/}requirements{/}locks{/}
    TMPFILE = {envtmpdir}{/}environment.yml
    YMLFILE = {toxinidir}{/}requirements{/}environment.yml
commands =
    cp "{env:YMLFILE}" "{env:TMPFILE}"
    # Hacky script to avoid having to have per-python-version yaml files.
    python3 -c 'from sys import version_info as v; fh = open("{env:TMPFILE}", "a"); fh.write(f"\n  - python =\{v.major\}.\{v.minor\}\n")'
    conda-lock --channel conda-forge --kind explicit --file {env:TMPFILE} --platform linux-64 --filename-template "{env:LOCKDIR}{envname}-\{platform\}.txt" {posargs}

[testenv:py{39,310,311,312}-{linux,osx,win}-tests]
description = Run unit and integration tests with PyTest.
conda_spec =
    py39-linux: {toxinidir}{/}requirements{/}locks{/}py39-lock-linux-64.txt
    py310-linux: {toxinidir}{/}requirements{/}locks{/}py310-lock-linux-64.txt
    py311-linux: {toxinidir}{/}requirements{/}locks{/}py311-lock-linux-64.txt
    py312-linux: {toxinidir}{/}requirements{/}locks{/}py312-lock-linux-64.txt
usedevelop = true
depends = coverage-clean
commands = pytest {posargs}

[testenv:py{38,39,310,311,312}-{linux,osx,win}-docs]
description = Invoke sphinx-build to build the HTML docs.
conda_spec =
    py39-linux: {toxinidir}{/}requirements{/}locks{/}py39-lock-linux-64.txt
    py310-linux: {toxinidir}{/}requirements{/}locks{/}py310-lock-linux-64.txt
    py311-linux: {toxinidir}{/}requirements{/}locks{/}py311-lock-linux-64.txt
    py312-linux: {toxinidir}{/}requirements{/}locks{/}py312-lock-linux-64.txt
usedevelop = true
commands = sphinx-build -d "docs/build/doctree" docs/source "docs/build/html" --color -W -bhtml {posargs}

[testenv:build-package]
description = Build sdist and wheel packages.
deps = build
skip_install = true
commands = python3 -m build

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase
'''

[tool.codespell]
ignore-words-list = "lazyness,meaned"
skip = "build,*.css,*.ipynb,*.js,*.html,*.svg,*.xml,.git"
